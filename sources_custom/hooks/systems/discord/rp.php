<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    core
 */

/**
 * Hook class.
 */
class Hook_discord_rp
{

	public function help()
	{
		return array(
		'!rp' => 'The RP commands are temporarily out of service.',
		'!rp|stats|(character name)|(optional RP ID)' => 'Get the stats of the specified character. If a role play ID is provided, the stats will reflect specific to that RP (accounts ailments, modifiers, and so on).',
		'!rp|new' => 'Create / Start a new role play and get its ID number. Command can only be used by people who linked Discord to TLC+. The user who executes this command is the game master of that RP.',
		'!rp|addcharacter|(character name)|(RP ID)|(Optional starting HP)' => 'Adds a character to a role play for participation. If starting HP not provided, the character will begin with their max possible HP. Requires verify command by character owner if the person executing this was not the owner nor Lovinity.',
		'!rp|verify|(character name)|(RP ID)' => 'Verifies the participation of an added character. Only the owner of the specified character can use this command and must have their Discord linked to TLC+.',
		'!rp|bail|(character name)|(RP ID)' => 'Instantly faints a character. Only the game master of the provided RP can use this command.',
		'!rp|stash|(item name)|(TLC+ username)' => 'Adds an item to the specified members stash. Only Lovinity can use this command.',
		'!rp|assignitem|(username)|(item name)|(character name to give the item to)|(RP ID the item will be used in)' => 'Assign a stashed item to a character in an RP for use. Users who use this command can only assign items from their own stash. Only users who linked their Discord to TLC+ can use this account.',
		'!rp|doitem|(Item ID #)|(character using the item)|(RP ID)|(Item specific params, each separated by a |)' => 'Use an item that a character has in possession. Only Lovinity, the game master, or the owner of the character can use this command. If you do not know the ID of the item you want to use, execute !rp|stats.',
		'!rp|attack|(Name of attack)|(Name of character dealing the attack)|(Name of character attack is aimed for, or 0 if not applicable)|(RP ID)|(Attack specific params, separated by |)' => 'Launch an attack or spell. Only Lovinity, the game master, or the owner of the attacking character may use this command.',
		'!rp|passtime|(amount of time to pass in RP minutes)|(RP ID)' => 'Advances the RP time. Executes ailments, powerups, and energy regeneration when applicable. Only Lovinity or the game master may use this command.',
		);
	}
	
	public function run($params, $userid, $username = 'guest')
	{
		require_code('rp');
		$user = rp_get_user_by_discord($userid);
		$ceo = ($user == 2);
		if (!array_key_exists(1,$params))
			{
				$fields['ERROR'] = 'You need to specify the rp sub-command to use.';
				return array('title' => '!rp', 'color' => '16711680', 'fields' => $fields);
			}

		if ($params[1] == 'damage')
		{
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params) || !array_key_exists(4,$params))
			{
				$fields['ERROR'] = 'Damage calculation requires 4 parameters: damage, source character name, target character name, and max possible HP damage.';
				return array('title' => '!rp|damage', 'color' => '16711680', 'fields' => $fields);
			}
			$sourcecharacter = rp_check_character($params[2]);
			$targetcharacter = rp_check_character($params[3]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|damage', 'color' => '16711680', 'fields' => $fields);
			}
			if (!is_numeric($targetcharacter))
			{
				$fields['ERROR'] = $targetcharacter;
				return array('title' => '!rp|damage', 'color' => '16711680', 'fields' => $fields);
			}			

				$fields['Damage done (HP)'] = rp_damage($sourcecharacter, $targetcharacter, $params[4]);
				return array('title' => '!rp|damage', 'color' => '16777215', 'fields' => $fields);
				
		}

		if ($params[1] == 'miss')
		{
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params))
			{
				$fields['ERROR'] = 'The miss calculation requires 3 parameters: miss, source character name, and target character name.';
				return array('title' => '!rp|miss', 'color' => '16711680', 'fields' => $fields);
			}	
			$sourcecharacter = rp_check_character($params[2]);
			$targetcharacter = rp_check_character($params[3]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|miss', 'color' => '16711680', 'fields' => $fields);
			}
			if (!is_numeric($targetcharacter))
			{
				$fields['ERROR'] = $targetcharacter;
				return array('title' => '!rp|miss', 'color' => '16711680', 'fields' => $fields);
			}	
				$fields['Result'] = (rp_miss($sourcecharacter, $targetcharacter)) ? 'The attack missed the target character.' : 'The attack successfully hit the target character.';
				return array('title' => '!rp|miss', 'color' => '16777215', 'fields' => $fields);
		}

		if ($params[1] == 'immunity')
		{
			if (!array_key_exists(2,$params))
			{
				$fields['ERROR'] = 'The immunity calculation requires the character name.';
				return array('title' => '!rp|immunity', 'color' => '16711680', 'fields' => $fields);
			}	
			$sourcecharacter = rp_check_character($params[2]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|immunity', 'color' => '16711680', 'fields' => $fields);
			}	
			
			
			$fields['Result'] = (rp_immune($sourcecharacter)) ? 'The ailment or spell was successfully avoided.' : 'The ailment or spell was NOT avoided.';
			return array('title' => '!rp|immunity', 'color' => '16777215', 'fields' => $fields);
		}

		if ($params[1] == 'intuition')
		{
			if (!array_key_exists(2,$params))
			{
				$fields['ERROR'] = 'The intuition calculation requires the character name.';
				return array('title' => '!rp|intuition', 'color' => '16711680', 'fields' => $fields);
			}	
			$sourcecharacter = rp_check_character($params[2]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|intuition', 'color' => '16711680', 'fields' => $fields);
			}
			
			$fields['Result'] = (rp_info($sourcecharacter)) ? 'Information was obtained.' : 'Information was NOT obtained.';
			return array('title' => '!rp|intuition', 'color' => '16777215', 'fields' => $fields);
		}

		if ($params[1] == 'regeneration')
		{
			if (!array_key_exists(2,$params))
			{
				$fields['ERROR'] = 'The regeneration calculation requires the character name.';
				return array('title' => '!rp|regeneration', 'color' => '16711680', 'fields' => $fields);
			}	
			$sourcecharacter = rp_check_character($params[2]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|regeneration', 'color' => '16711680', 'fields' => $fields);
			}
			
			$fields['Regeneration (EP)'] = rp_regeneration($sourcecharacter);
			return array('title' => '!rp|regeneration', 'color' => '16777215', 'fields' => $fields);
		}

		if ($params[1] == 'stats')
		{
			if (!array_key_exists(2,$params))
			{
				$fields['ERROR'] = 'Stats requires the character name.';
				return array('title' => '!rp|stats', 'color' => '16711680', 'fields' => $fields);
			}	
			$sourcecharacter = rp_check_character($params[2]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|stats', 'color' => '16711680', 'fields' => $fields);
			}
			if (array_key_exists(3,$params))
			{
				return array('title' => '!rp|stats', 'color' => '16744703', 'fields' => rp_get_stats($sourcecharacter, $params[3]));
			} else {
				return array('title' => '!rp|stats', 'color' => '16744703', 'fields' => rp_get_stats($sourcecharacter));
			}
		}
		if ($params[1] == 'new')
		{
			if ($user == 0)
			if (!array_key_exists(2,$params))
			{
				$fields['ERROR'] = 'The discord user attempting to start a role play does not have their Discord account linked to their TLC+ account, which is required. Do command !userid for more information.';
				return array('title' => '!rp|new', 'color' => '16711680', 'fields' => $fields);
			}
			$rp = rp_new_rp($user);
			
			$fields['Result'] = 'A new role play was created. To add characters, use the !rp|addcharacter command. The character owner must then use !rp|verify to verify their participation, unless Lovinity added the character.';
			$fields['RP ID'] = $rp;
			return array('title' => '!rp|new', 'color' => '65280', 'fields' => $fields);
		}
		if ($params[1] == 'addcharacter')
		{
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params))
			{
				$fields['ERROR'] = 'addcharacter requires the character being added and the RP ID being added to.';
				return array('title' => '!rp|addcharacter', 'color' => '16711680', 'fields' => $fields);
			}	
			$sourcecharacter = rp_check_character($params[2]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|addcharacter', 'color' => '16711680', 'fields' => $fields);
			}	
				
			$output = rp_add_character($sourcecharacter, $params[3], (array_key_exists(4,$params) && is_numeric($params[4])) ? $params[4] : null, ($ceo || rp_get_character_owner($sourcecharacter) == rp_get_user_by_discord($userid)));
			$fields['Result'] = $output;
			return array('title' => '!rp|addcharacter', 'color' => '16777215', 'fields' => $fields);
		}
		if ($params[1] == 'verify')
		{
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params))
			{
				$fields['ERROR'] = 'verify requires character name and RP ID.';
				return array('title' => '!rp|verify', 'color' => '16711680', 'fields' => $fields);
			}	
		
			$sourcecharacter = rp_check_character($params[2]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|verify', 'color' => '16711680', 'fields' => $fields);
			}	
			
			$fields['Result'] = rp_verify_character($sourcecharacter, $params[3], $user);
			return array('title' => '!rp|addcharacter', 'color' => '16777215', 'fields' => $fields);
		}
		if ($params[1] == 'bail')
		{
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params))
			{
				$fields['ERROR'] = 'bail requires character name and RP ID.';
				return array('title' => '!rp|bail', 'color' => '16711680', 'fields' => $fields);
			}	
			if ($user != rp_gm($params[3]))
			{
				$fields['ERROR'] = 'Only the game master may use the bail command.';
				return array('title' => '!rp|bail', 'color' => '16711680', 'fields' => $fields);
			}	
				
			$sourcecharacter = rp_check_character($params[2]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|bail', 'color' => '16711680', 'fields' => $fields);
			}	
			if (!rp_in_rp($sourcecharacter, $params[2], false))
			{
				$fields['ERROR'] = 'The provided character is not involved in the provided RP.';
				return array('title' => '!rp|bail', 'color' => '16711680', 'fields' => $fields);
			}	
			 $result = (rp_modify_HP($sourcecharacter, 0, $params[2], false, true)) ? 'The character has been bailed!' : 'An error occurred.';
			 	$fields['Result'] = $result;
				return array('title' => '!rp|bail', 'color' => '16777215', 'fields' => $fields);
			
		}		
		if ($params[1] == 'stash')
		{
			if (!$ceo)
			{
				$fields['ERROR'] = 'Only Lovinity may use the stash command.';
				return array('title' => '!rp|stash', 'color' => '16711680', 'fields' => $fields);
			}	
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params))
			{
				$fields['ERROR'] = 'The stash command requires the name of the item being stashed, and the TLC+ username receiving the item.';
				return array('title' => '!rp|stash', 'color' => '16711680', 'fields' => $fields);
			}		
				
			$fields['Result'] = rp_stash_item($params[2], $params[3]);
			return array('title' => '!rp|stash', 'color' => '16777215', 'fields' => $fields);
		}		
		if ($params[1] == 'assignitem')
		{		
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params) || !array_key_exists(4,$params) || !array_key_exists(5,$params))
			{
				$fields['ERROR'] = 'assignitem requires the username possessing the item, the name of the item being assigned, the name of the character receiving the item, and the RP ID that the item will be used in.';
				return array('title' => '!rp|assignitem', 'color' => '16711680', 'fields' => $fields);
			}	
			$sourcecharacter = rp_check_character($params[4]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|assignitem', 'color' => '16711680', 'fields' => $fields);
			}
			if ($user != $ceo && $params[5] != $GLOBALS['FORUM_DRIVER']->get_username($user))
			{
				$fields['ERROR'] = 'You can only assign items you possess... unless Lovinity, who can assign items to anyone.';
				return array('title' => '!rp|assignitem', 'color' => '16711680', 'fields' => $fields);
			}	
			$userusing = $GLOBALS['FORUM_DRIVER']->get_member_from_username($params[2]);
			if ($userusing == null)
			{
				$fields['ERROR'] = 'The provided TLC+ username does not exist.';
				return array('title' => '!rp|assignitem', 'color' => '16711680', 'fields' => $fields);
			}
			$fields['Result'] = rp_assign_item($userusing, $params[3], $sourcecharacter, $params[5]);
			return array('title' => '!rp|assignitem', 'color' => '16777215', 'fields' => $fields);	
		}
		if ($params[1] == 'doitem')
		{	
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params) || !array_key_exists(4,$params))
			{
				$fields['ERROR'] = 'doitem requires item ID being used, name of character using item, RP ID involved, and if applicable, any item parameters.';
				return array('title' => '!rp|doitem', 'color' => '16711680', 'fields' => $fields);
			}	
				
			$sourcecharacter = rp_check_character($params[3]);
			if (!is_numeric($sourcecharacter))
			{
				$fields['ERROR'] = $sourcecharacter;
				return array('title' => '!rp|doitem', 'color' => '16711680', 'fields' => $fields);
			}
				
			if ($user != $ceo && $user != rp_gm($params[4]) && $user != rp_get_character_owner($sourcecharacter))
			{
				$fields['ERROR'] = 'doitem may only be used by Lovinity, the game master, or the owner of the provided character.';
				return array('title' => '!rp|doitem', 'color' => '16711680', 'fields' => $fields);
			}	
			
			$p = array();
			if (array_key_exists(5,$params))
				$p['p1'] = $params[5];
			if (array_key_exists(6,$params))
				$p['p2'] = $params[6];
			if (array_key_exists(7,$params))
				$p['p3'] = $params[7];
			if (array_key_exists(8,$params))
				$p['p4'] = $params[8];
			if (array_key_exists(9,$params))
				$p['p5'] = $params[9];
			$data = rp_do_item($params[2], $sourcecharacter, $params[4], $p);
			return array('title' => '!rp|doitem', 'color' => $data['color'], 'fields' => $data['fields']);	
		}
		if ($params[1] == 'attack')
		{	
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params) || !array_key_exists(4,$params) || !array_key_exists(5,$params))
				return 'Error! This command requires attack name, source character, target character (0 if not applicable for the specific attack), and RP ID.';
				
			$sourcecharacter = rp_check_character($params[3]);
			if (!is_numeric($sourcecharacter))
				return $sourcecharacter;
			
			if ($params[4] === '0')	
			{
				$targetcharacter = 0;
			} else {
				$targetcharacter = rp_check_character($params[4]);
				if (!is_numeric($targetcharacter))
					return $targetcharacter;
			}
				
			if ($user != $ceo && $user != rp_gm($params[3]) && $user != rp_get_character_owner($sourcecharacter))
				return 'Error! This command may only be used by Lovinity, the game master, or the owner of the character specified.';
			
			if (!rp_exists($params[5]))
				return 'Error! The specified RP ID does not exist.';
			if (!rp_in_rp($sourcecharacter, $params[5], false))
				return 'Error! ' . $params[3] . ' is not participating in the specified RP.';
			if ($targetcharacter != 0 && !rp_in_rp($targetcharacter, $params[5], false))
				return 'Error! ' . $params[4] . ' is not participating in the specified RP.';
			
			$p = array();
			if (array_key_exists(6,$params))
				$p['p1'] = $params[6];
			if (array_key_exists(7,$params))
				$p['p2'] = $params[7];
			if (array_key_exists(8,$params))
				$p['p3'] = $params[8];
			if (array_key_exists(9,$params))
				$p['p4'] = $params[9];
			if (array_key_exists(10,$params))
				$p['p5'] = $params[10];
			
			return rp_do_attack($sourcecharacter, $targetcharacter, $params[5], $params[2], $p);		
		}
		if ($params[1] == 'passtime')
		{	
			if (!array_key_exists(2,$params) || !array_key_exists(3,$params))
				return 'Error! This command requires amount of time to pass, and RP ID to pass time in.';
				
			if ($user != $ceo && $user != rp_gm($params[3]))
				return 'Error! This command may only be used by Lovinity or the game master.';
				
			return rp_pass_time($params[3], $params[2]);
		}
		
		return 'Unknown error.';
	}
	
}
