<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    backup
 */

/**
 * Hook class.
 */
class Hook_cron_star
{
	
		/* 	Set the below variable to the number of seconds in the past action logs should have an impact on popularity.
			The number 2592000 represents 30 days, which was the default.
		*/
		
	public $lookbackseconds = 2592000;
	
	/*	Set the below variable to the ID of the custom field for each member's popularity, in format 'field_(ID)'. */
	public $cpf = 'field_44';
	
	public $popularityarray = array();
	public $totalpopularity = 0;
	public $maxpopularity = 0;
	
    /**
     * Run function for CRON hooks. Searches for tasks to perform.
     */
    public function run()
    {
		/* Uncomment the below section and edit as necessary to define when the cron should NOT run */
		
        //if (intval(date('i')) > 4) {
        //    return;
        //}
		
		//get the number of registered users. Subtract 1 because we're not counting Guest nor Lovinity (forum stat already doesn't count guest, so only remove 1).
		require_code('cns_general');
		$stats = cns_get_forums_stats();
		$nummembers = intval($stats['num_members']) - 1;

		// first, the banners
		$actions = $GLOBALS['SITE_DB']->query_select('banners', array('*'), null, 'WHERE add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_BANNER'), $action['add_date']);
		}
		
		// Then, status updates
		$actions = $GLOBALS['SITE_DB']->query_select('activities', array('*'), null, 'WHERE a_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND a_member_id != 1 AND a_language_string_code LIKE \'RAW_DUMP\'');
		foreach ($actions as $action)
		{
			$this->add_activity($action['a_member_id'], get_option('points_chat'), $action['a_time']);
		}
		
		// Next, calendar events
		$actions = $GLOBALS['SITE_DB']->query_select('calendar_events', array('*'), null, 'WHERE e_add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND e_submitter != 1 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['e_submitter'], 25, $action['e_add_date']);
		}
		
		// Next, catalogue entries (we award activity based on submission points for the individual catalogue)
		$points = array();
		$actions = $GLOBALS['SITE_DB']->query_select('catalogues', array('*'), null);
		foreach ($actions as $action)
		{
			$points[$action['c_name']] = $action['c_submit_points'];
		}
		$actions = $GLOBALS['SITE_DB']->query_select('catalogue_entries', array('*'), null, 'WHERE ce_add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND ce_submitter != 1 AND ce_validated = 1');
		foreach ($actions as $action)
		{
			if (array_key_exists($action['c_name'],$points))
				$this->add_activity($action['ce_submitter'], $points[$action['c_name']], $action['ce_add_date']);
		}
		
		// Next, downloads
		$actions = $GLOBALS['SITE_DB']->query_select('download_downloads', array('*'), null, 'WHERE add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_DOWNLOAD'), $action['add_date']);
		}
		
		// Next, forum posts (posts in private topics only count as chat messages)
		$topicforum = array();
		$actions = $GLOBALS['SITE_DB']->query_select('f_posts', array('*'), null, 'WHERE p_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND p_poster != 1 AND p_validated = 1');
		foreach ($actions as $action)
		{
			if (!array_key_exists($action['p_topic_id'],$topicforum))
			{
				$forum_id = $GLOBALS['SITE_DB']->query_select_value_if_there('f_topics', 't_forum_id', array('id' => $action['p_topic_id']));
				$topicforum[$action['p_topic_id']] = $forum_id;
			}
			if ($topicforum[$action['p_topic_id']] == null)
			{
				$this->add_activity($action['p_poster'], get_option('points_chat'), $action['p_time']);
			} else {
				$this->add_activity($action['p_poster'], get_option('points_posting'), $action['p_time']);
			}
		}

		// Next, Arrowchat instant messages
		$actions = $GLOBALS['SITE_DB']->query('SELECT * FROM arrowchat WHERE sent > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND `from` != 3 AND `to` != 3 AND `from` != 1 AND `to` != 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['from'], get_option('points_chat'), $action['sent']);
		}
		
		// Next, forum topics (we're actually only concerned about the topic polls and topic poll voting.)
		$actions = $GLOBALS['SITE_DB']->query_select('f_topics', array('*'), null, 'WHERE t_cache_first_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND t_validated = 1 AND t_poll_id IS NOT NULL');
		foreach ($actions as $action)
		{
			if ($action['t_cache_first_member_id'] != 1)
				$this->add_activity($action['t_cache_first_member_id'], get_option('points_ADD_POLL'), $action['t_cache_first_time']);
			$actions2 = $GLOBALS['SITE_DB']->query_select('f_poll_votes', array('*'), array('pv_poll_id' => $action['t_poll_id']));
			// Now, credit members for voting in these polls. Unfortunately, votes have no time stamp, so we're basing it off of the topic.
			foreach ($actions2 as $action2)
			{
				if ($action2['pv_member_id'] != 1)
					$this->add_activity($action2['pv_member_id'], intval(get_option('points_rating') * 2), $action['t_cache_first_time']);
			}
		}
		
		// Next, images
		$actions = $GLOBALS['SITE_DB']->query_select('images', array('*'), null, 'WHERE add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_IMAGE'), $action['add_date']);
		}	
		
		// Next, gifted gifts
		//$actions = $GLOBALS['SITE_DB']->query_select('members_gifts', array('*'), null, 'WHERE add_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND from_member_id != 1');
		//foreach ($actions as $action)
		//{
		//	$this->add_activity($action['from_member_id'], get_option('gift_reward_amount'), $action['add_time']);
		//}	
		
		// Next, news and blogs
		$actions = $GLOBALS['SITE_DB']->query_select('news', array('*'), null, 'WHERE date_and_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_NEWS'), $action['date_and_time']);
		}		
		
		// Next, polls and poll votes
		$actions = $GLOBALS['SITE_DB']->query_select('poll', array('*'), null, 'WHERE date_and_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()));
		foreach ($actions as $action)
		{
			if ($action['submitter'] != 1)
				$this->add_activity($action['submitter'], get_option('points_ADD_POLL'), $action['date_and_time']);
			$actions2 = $GLOBALS['SITE_DB']->query_select('poll_votes', array('*'), array('v_poll_id' => $action['id']));
			// Now, credit members for voting in these polls. Unfortunately, votes have no time stamp, so we're basing it off of the topic.
			foreach ($actions2 as $action2)
			{
				if ($action2['v_voter_id'] != 1)
					$this->add_activity($action2['v_voter_id'], intval(get_option('points_rating') * 2), $action['date_and_time']);
			}
		}	
		
		// Next, quizzes (adding)
		$actions = $GLOBALS['SITE_DB']->query_select('quizzes', array('*'), null, 'WHERE q_add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND q_submitter != 1 AND q_validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['q_submitter'], get_option('points_ADD_QUIZ'), $action['q_add_date']);
		}		
		
		// Next, quizzes (participating)
		$actions = $GLOBALS['SITE_DB']->query_select('quiz_entries', array('*'), null, 'WHERE q_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND q_member != 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['q_member'], intval(get_option('points_ADD_QUIZ') / 3), $action['q_time']);
		}	
		
		// Next, ratings
		$actions = $GLOBALS['SITE_DB']->query_select('rating', array('*'), null, 'WHERE rating_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND rating_member != 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['rating_member'], get_option('points_rating'), $action['rating_time']);
		}	
		
		// Next, videos and audio
		$actions = $GLOBALS['SITE_DB']->query_select('videos', array('*'), null, 'WHERE add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_VIDEO'), $action['add_date']);
		}
		
		// Next, wiki posts
		$actions = $GLOBALS['SITE_DB']->query_select('wiki_posts', array('*'), null, 'WHERE date_and_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND member_id != 1 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['member_id'], get_option('points_wiki'), $action['date_and_time']);
		}
		
		// By this point, every member has had all activity added up. So let's do the end-of-calculation routines.
		
		// Deduct based on number of demerits each user has (1 demerit = 1% reduction).
		// Also determine total activity.
		foreach ($this->popularityarray as $key => $value)
		{
		if ($GLOBALS['FORUM_DRIVER']->get_username($key) != null)
		{
			$demerits = $GLOBALS['SITE_DB']->query_select_value_if_there('f_member_custom_fields', 'field_40', array('mf_member_id' => $key));
			if ($demerits == null || $demerits == '' || !$demerits)
    				$demerits = 0;
			if ($key != 1 && $key != 2)
				$this->totalpopularity = $this->totalpopularity + ($value * ((100-$demerits) / 100));
			$this->popularityarray[$key] = ($value * ((100-$demerits) / 100));
		}
		}

		// Add a stock index entry to the database for the total amount of activity within the last 30 days. Delete records older than 30 days.
		$GLOBALS['SITE_DB']->query_insert('stock_index', array(
            	'stock_index' => float_format($this->totalpopularity / 100),
            	'timestamp' => time(),
       		));
       		$GLOBALS['SITE_DB']->query_delete('stock_index', null, ' WHERE timestamp < ' . (time() - (60 * 60 * 24 * 30)));
       		set_value('current_activity_index', strval(float_format($this->totalpopularity / 100)));
		
		// Go through each member and set their popularity value.
		foreach ($this->popularityarray as $key => $value)
		{
		if ($key != 1 && $GLOBALS['FORUM_DRIVER']->get_username($key) != null)
		{
			$popularity = $value;
			$multiplier = round($popularity,2);
			$updater = $GLOBALS['SITE_DB']->query_update('f_member_custom_fields',array($this->cpf => $multiplier),array('mf_member_id' => $key));
		}
		}
		
		// Set the max popularity value for STAR percent calculations
		$this->maxpopularity = round($this->maxpopularity,2);
		set_value('max_star_index', strval($this->maxpopularity));
		
		$GLOBALS['SITE_DB']->query('UPDATE `arrowchat_status` SET status=\'available\', session_time=' . time() . ' WHERE userid LIKE \'3\'');

		return;	
    }

    public function add_activity($member, $weight, $time)
    {
		if(!array_key_exists($member,$this->popularityarray))
			$this->popularityarray[$member] = 0;
			
		$beginningtime = tz_time(time() - $this->lookbackseconds, get_site_timezone());
		$weight = $weight * (($time - $beginningtime) / $this->lookbackseconds);
		
		// Now, add the action's final weight to total, and to the specific member's, ONLY if the member exists
			if ($GLOBALS['FORUM_DRIVER']->get_username($member) != null)
			{
				$this->popularityarray[$member] = $this->popularityarray[$member] + $weight;
				if ($this->popularityarray[$member] > $this->maxpopularity && $member != 2 && $member != 1)
					$this->maxpopularity = $this->popularityarray[$member];
			}
			
			
    }
}
