<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    backup
 */

/**
 * Hook class.
 */
class Hook_cron_star
{
	
		/* 	Set the below variable to the number of seconds in the past action logs should have an impact on popularity.
			The number 2592000 represents 30 days, which was the default.
		*/
		
	public $lookbackseconds = 2592000;
	
	/*	Set the below variable to the ID of the custom field for each member's popularity, in format 'field_(ID)'. */
	public $cpf = 'field_44';
	
	public $popularityarray = array();
	public $totalpopularity = 0;
	public $maxpopularity = 0;
	
    /**
     * Run function for CRON hooks. Searches for tasks to perform.
     */
    public function run()
    {
		/* Uncomment the below section and edit as necessary to define when the cron should NOT run */
		
        //if (intval(date('i')) > 4) {
        //    return;
        //}
		
		//get the number of registered users. Subtract 1 because we're not counting Guest nor Lovinity (forum stat already doesn't count guest, so only remove 1).
		require_code('cns_general');
		$stats = cns_get_forums_stats();
		$nummembers = integer_format($stats['num_members']) - 1;

		// first, the banners
		$actions = $GLOBALS['SITE_DB']->query_select('banners', array('*'), null, 'WHERE add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND submitter != 2 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_BANNER'), $action['add_date']);
		}
		
		// Then, status updates
		$actions = $GLOBALS['SITE_DB']->query_select('activities', array('*'), null, 'WHERE a_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND a_member_id != 1 AND a_member_id != 2 AND a_language_string_code LIKE \'RAW_DUMP\'');
		foreach ($actions as $action)
		{
			$this->add_activity($action['a_member_id'], get_option('points_chat'), $action['a_time']);
		}
		
		// Next, calendar events
		$actions = $GLOBALS['SITE_DB']->query_select('calendar_events', array('*'), null, 'WHERE e_add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND e_submitter != 1 AND e_submitter != 2 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['e_submitter'], 25, $action['e_add_date']);
		}
		
		// Next, catalogue entries (we award activity based on submission points for the individual catalogue)
		$points = array();
		$actions = $GLOBALS['SITE_DB']->query_select('catalogues', array('*'), null);
		foreach ($actions as $action)
		{
			$points[$action['c_name']] = $action['c_submit_points'];
		}
		$actions = $GLOBALS['SITE_DB']->query_select('catalogue_entries', array('*'), null, 'WHERE ce_add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND ce_submitter != 1 AND ce_submitter != 2 AND ce_validated = 1');
		foreach ($actions as $action)
		{
			if (array_key_exists($action['c_name'],$points))
				$this->add_activity($action['ce_submitter'], $points[$action['c_name']], $action['ce_add_date']);
		}
		
		// Next, downloads
		$actions = $GLOBALS['SITE_DB']->query_select('download_downloads', array('*'), null, 'WHERE add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND submitter != 2 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_DOWNLOAD'), $action['add_date']);
		}
		
		// Next, forum posts (posts in private topics only count as chat messages)
		$topicforum = array();
		$actions = $GLOBALS['SITE_DB']->query_select('f_posts', array('*'), null, 'WHERE p_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND p_poster != 1 AND p_poster != 2 AND p_validated = 1');
		foreach ($actions as $action)
		{
			if (!array_key_exists($action['p_topic_id'],$topicforum))
			{
				$forum_id = $GLOBALS['SITE_DB']->query_select_value_if_there('f_topics', 't_forum_id', array('id' => $action['p_topic_id']));
				$topicforum[$action['p_topic_id']] = $forum_id;
			}
			if ($topicforum[$action['p_topic_id']] == null)
			{
				$this->add_activity($action['p_poster'], get_option('points_chat'), $action['p_time']);
			} else {
				$this->add_activity($action['p_poster'], get_option('points_posting'), $action['p_time']);
			}
		}

		// Next, Arrowchat instant messages
		$actions = $GLOBALS['SITE_DB']->query('SELECT * FROM arrowchat WHERE sent > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND `from` != 3 AND `to` != 3 AND `from` != 2 AND `from` != 1 AND `to` != 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['from'], get_option('points_chat'), $action['sent']);
		}
		
		// Next, forum topics (we're actually only concerned about the topic polls and topic poll voting.)
		$actions = $GLOBALS['SITE_DB']->query_select('f_topics', array('*'), null, 'WHERE t_cache_first_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND t_validated = 1 AND t_poll_id IS NOT NULL');
		foreach ($actions as $action)
		{
			if ($action['t_cache_first_member_id'] != 1 && $action['t_cache_first_member_id'] != 2)
				$this->add_activity($action['t_cache_first_member_id'], get_option('points_ADD_POLL'), $action['t_cache_first_time']);
			$actions2 = $GLOBALS['SITE_DB']->query_select('f_poll_votes', array('*'), array('pv_poll_id' => $action['t_poll_id']));
			// Now, credit members for voting in these polls. Unfortunately, votes have no time stamp, so we're basing it off of the topic.
			foreach ($actions2 as $action2)
			{
				if ($action2['pv_member_id'] != 1 && $action2['pv_member_id'] != 2)
					$this->add_activity($action2['pv_member_id'], intval(get_option('points_rating') * 2), $action['t_cache_first_time']);
			}
		}
		
		// Next, images
		$actions = $GLOBALS['SITE_DB']->query_select('images', array('*'), null, 'WHERE add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND submitter != 2 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_IMAGE'), $action['add_date']);
		}	
		
		// Next, gifted gifts
		//$actions = $GLOBALS['SITE_DB']->query_select('members_gifts', array('*'), null, 'WHERE add_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND from_member_id != 1 AND from_member_id != 2');
		//foreach ($actions as $action)
		//{
		//	$this->add_activity($action['from_member_id'], get_option('gift_reward_amount'), $action['add_time']);
		//}	
		
		// Next, news and blogs
		$actions = $GLOBALS['SITE_DB']->query_select('news', array('*'), null, 'WHERE date_and_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND submitter != 2 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_NEWS'), $action['date_and_time']);
		}		
		
		// Next, polls and poll votes
		$actions = $GLOBALS['SITE_DB']->query_select('poll', array('*'), null, 'WHERE date_and_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()));
		foreach ($actions as $action)
		{
			if ($action['submitter'] != 1 && $action['submitter'] != 2)
				$this->add_activity($action['submitter'], get_option('points_ADD_POLL'), $action['date_and_time']);
			$actions2 = $GLOBALS['SITE_DB']->query_select('poll_votes', array('*'), array('v_poll_id' => $action['id']));
			// Now, credit members for voting in these polls. Unfortunately, votes have no time stamp, so we're basing it off of the topic.
			foreach ($actions2 as $action2)
			{
				if ($action2['v_voter_id'] != 1 && $action2['v_voter_id'] != 2)
					$this->add_activity($action2['v_voter_id'], intval(get_option('points_rating') * 2), $action['date_and_time']);
			}
		}	
		
		// Next, quizzes (adding)
		$actions = $GLOBALS['SITE_DB']->query_select('quizzes', array('*'), null, 'WHERE q_add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND q_submitter != 1 AND q_submitter != 2 AND q_validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['q_submitter'], get_option('points_ADD_QUIZ'), $action['q_add_date']);
		}		
		
		// Next, quizzes (participating)
		$actions = $GLOBALS['SITE_DB']->query_select('quiz_entries', array('*'), null, 'WHERE q_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND q_member != 1 AND q_member != 2');
		foreach ($actions as $action)
		{
			$this->add_activity($action['q_member'], intval(get_option('points_ADD_QUIZ') / 3), $action['q_time']);
		}	
		
		// Next, ratings
		$actions = $GLOBALS['SITE_DB']->query_select('rating', array('*'), null, 'WHERE rating_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND rating_member != 1 AND rating_member != 2');
		foreach ($actions as $action)
		{
			$this->add_activity($action['rating_member'], get_option('points_rating'), $action['rating_time']);
		}	
		
		// Next, videos and audio
		$actions = $GLOBALS['SITE_DB']->query_select('videos', array('*'), null, 'WHERE add_date > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND submitter != 1 AND submitter != 2 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['submitter'], get_option('points_ADD_VIDEO'), $action['add_date']);
		}
		
		// Next, wiki posts
		$actions = $GLOBALS['SITE_DB']->query_select('wiki_posts', array('*'), null, 'WHERE date_and_time > ' . tz_time(time() - $this->lookbackseconds, get_site_timezone()) . ' AND member_id != 1 AND member_id != 2 AND validated = 1');
		foreach ($actions as $action)
		{
			$this->add_activity($action['member_id'], get_option('points_wiki'), $action['date_and_time']);
		}
		
		// By this point, every member has had all activity added up. So let's do the end-of-calculation routines.
		
		// Deduct based on number of demerits each user has (1 demerit = 1% reduction).
		// Also determine total activity.
		foreach ($this->popularityarray as $key => $value)
		{
		if ($GLOBALS['FORUM_DRIVER']->get_username($key) != null)
		{
			$demerits = $GLOBALS['SITE_DB']->query_select_value_if_there('f_member_custom_fields', 'field_40', array('mf_member_id' => $key));
			if ($demerits == null || $demerits == '' || !$demerits)
    				$demerits = 0;
			$this->totalpopularity = $this->totalpopularity + ($value * ((100-$demerits) / 100));
			$this->popularityarray[$key] = ($value * ((100-$demerits) / 100));
		}
		}

		// Add a stock index entry to the database for the total amount of activity within the last 30 days
		$GLOBALS['SITE_DB']->query_insert('stock_index', array(
            	'stock_index' => float_format($this->totalpopularity / 100),
            	'timestamp' => time(),
       		));
		
		// Go through each member and set their popularity value.
		foreach ($this->popularityarray as $key => $value)
		{
		if ($key != 1 && $GLOBALS['FORUM_DRIVER']->get_username($key) != null)
		{
			$popularity = $value;
			$multiplier = round($popularity,2);
			$updater = $GLOBALS['SITE_DB']->query_update('f_member_custom_fields',array($this->cpf => $multiplier),array('mf_member_id' => $key));
		}
		}
		
		// Set the max popularity value for STAR percent calculations
		set_value('max_star_index', strval($this->maxpopularity));
		
		$GLOBALS['SITE_DB']->query('UPDATE `arrowchat_status` SET status=\'available\', session_time=' . time() . ' WHERE userid LIKE \'3\'');


		// Now let's begin the credibility portion of the cron. Due to the complexity, it will only be calculated once every 15 minutes.
		$_last_run = get_value('last_time_cron_star_credibility', null, true);
       	$last_run = is_null($_last_run) ? 0 : intval($_last_run);
        if ($last_run < time() - (60 * 15)) {
			set_value('last_time_cron_star_credibility', strval(time()), true);
			
			require_code('content');
			
			$credibility = array();
			$joinstamp = array();
			$lastloginstamp = array();
			$numberposts = array();
			$numberprosecutions = array();
			$isbanned = array();
			$credibilitypower = array();
			
			// first, build an array of credibility for all members and set them to 0
			$members = $GLOBALS['SITE_DB']->query_select('f_members', array('*'), null);
			foreach ($members as $member)
			{
				$credibility[$member['id']] = 0;
				// we separate credibility gains and losses into two variables because we don't want things that
				// fractionalize credibility to fractionalize the bad... we want it to only do the good.
				$credibilityp[$member['id']] = 0;
				$credibilitym[$member['id']] = 0;
				$credibilitypower[$member['id']] = 0;
				$credibilitymstaff[$member['id']] = 0;
				$credibilitymuser[$member['id']] = 0;
				$credibilitypstaff[$member['id']] = 0;
				$credibilitypuser[$member['id']] = 0;
				$joinstamp[$member['id']] = $member['m_join_time'];
				$lastloginstamp[$member['id']] = $member['m_last_visit_time'];
				$numberposts[$member['id']] = $member['m_cache_num_posts'];
				$numberprosecutions[$member['id']] = $member['m_cache_warnings'];
				$isbanned[$member['id']] = $member['m_is_perm_banned'];
				
				// We need to calculate how much influence members have on other members' credibilities.
				
				if ($numberposts[$member['id']] > 4) // first power comes from having 5 or more posts
					$credibilitypower[$member['id']]++;
				if ($numberposts[$member['id']] > 199) // give another power point if post count 200 or more
					$credibilitypower[$member['id']]++;
				if ($numberposts[$member['id']] > 499) // give another power point if post count 500 or more
					$credibilitypower[$member['id']]++;
				if (($lastloginstamp[$member['id']] - $joinstamp[$member['id']]) >= (60 * 60 * 24 * 90)) // another power point if the last time the user logged in was 90 or more days past when the user registered
					$credibilitypower[$member['id']]++;
				if (($lastloginstamp[$member['id']] - $joinstamp[$member['id']]) >= (60 * 60 * 24 * 365)) // another power point if the last time the user logged in was 1 or more years past when the user registered
					$credibilitypower[$member['id']]++;
					
				if ($isbanned[$member['id']] == 1) // Permanently banned member = no credibility power
					$credibilitypower[$member['id']] = 0;
				if ($credibilitypower[$member['id']] > 1 && $numberprosecutions[$member['id']] > 1) // lose one power point if member would have had 2 or more, but has had 2 or more prosecutions in their lifetime
					$credibilitypower[$member['id']]--;
				if ($credibilitypower[$member['id']] > 0 && $numberprosecutions[$member['id']] > 3) // if user has earned 4 or more prosecutions in their lifetime, the HIGHEST influence they can possibly have on credibility is 1.
					$credibilitypower[$member['id']] = 1;
			}
			
			
			// Start off by getting all the feedback
			$ratings = $GLOBALS['SITE_DB']->query_select('rating', array('*'), null);
			foreach ($ratings as $rating)
			{
				$_content_type = $rating['rating_for_type'];
				$content_id = $rating['rating_for_id'];
				$content_type = convert_composr_type_codes('feedback_type_code', $_content_type, 'content_type');
				if ($content_type != '') {
					$cma_ob = get_content_object($content_type);
					$info = $cma_ob->info();
					list( ,$submitter_id, , , , ) = content_get_details($content_type, $content_id);
				}

				// if the submitter ID AND the ID of the rating user both exist, then do credibility. Otherwise, no credibility.
				if (array_key_exists($submitter_id,$credibility) && array_key_exists($rating['rating_member'],$credibility))
				{
					if ($rating['rating'] > 5) // rating > 5 = add credibility
					{
						$credibilityp[$submitter_id] += $credibilitypower[$rating['rating_member']];
						if ($GLOBALS['FORUM_DRIVER']->is_staff($rating['rating_member']))
						{
							$credibilitypstaff[$submitter_id] += $credibilitypower[$rating['rating_member']];
						} else {
							$credibilitypuser[$submitter_id] += $credibilitypower[$rating['rating_member']];
						}
					} else { // rating <= 5 = lose credibility
						$credibilitym[$submitter_id] += $credibilitypower[$rating['rating_member']];
						if ($GLOBALS['FORUM_DRIVER']->is_staff($rating['rating_member']))
						{
							$credibilitymstaff[$submitter_id] += $credibilitypower[$rating['rating_member']];
						} else {
							$credibilitymuser[$submitter_id] += $credibilitypower[$rating['rating_member']];
						}
					}
				}
			}
			
			// Next, we're going to add credibility for when users receive gift points from others.
			// This only accounts for when users receive gift points for a role. All other gift point transactions don't count.
			// Weight: 0 = no credibility. 1 = credibility for every 25 points given. 2 = 1 for every 20. 3 = 1 for every 15. 4 = 1 for every 10. 5 = 1 for every 5.
			$where = ' WHERE ' . $GLOBALS['SITE_DB']->translate_field_ref('reason') . ' LIKE \'' . db_encode_like('Wise Mind: %') . '\'
			OR ' . $GLOBALS['SITE_DB']->translate_field_ref('reason') . ' LIKE \'' . db_encode_like('Supportive Soul: %') . '\'
			OR ' . $GLOBALS['SITE_DB']->translate_field_ref('reason') . ' LIKE \'' . db_encode_like('Randomly Kind: %') . '\'
			OR ' . $GLOBALS['SITE_DB']->translate_field_ref('reason') . ' LIKE \'' . db_encode_like('Busy for Good: %') . '\'
			OR ' . $GLOBALS['SITE_DB']->translate_field_ref('reason') . ' LIKE \'' . db_encode_like('Warm and Friendly: %') . '\'
			OR ' . $GLOBALS['SITE_DB']->translate_field_ref('reason') . ' LIKE \'' . db_encode_like('Community Guard: %') . '\'
			OR ' . $GLOBALS['SITE_DB']->translate_field_ref('reason') . ' LIKE \'' . db_encode_like('Role Model: %') . '\'
			';
			$gifts = $GLOBALS['SITE_DB']->query_select('gifts', array('*'), null, $where);
			foreach ($gifts as $gift)
			{
				if (array_key_exists($gift['gift_to'],$credibility) && array_key_exists($gift['gift_from'],$credibility) && $credibilitypower[$gift['gift_from']] > 0)
				{
					$credits = integer_format($gift['amount'] / (30 - (5 * $credibilitypower[$gift['gift_from']])));
					$credibilityp[$gift['gift_to']] += $credits;
						if ($GLOBALS['FORUM_DRIVER']->is_staff($gift['gift_from']))
						{
							$credibilitypstaff[$gift['gift_to']] += $credits;
						} else {
							$credibilitypuser[$gift['gift_to']] += $credits;
						}
				}
			}
			
			// Next, add credibility for every virtual gift received, weighted based on user's credibility power.
			/*
			$gifts = $GLOBALS['SITE_DB']->query_select('members_gifts', array('*'), null);
			foreach ($gifts as $gift)
			{
				if (array_key_exists($gift['to_member_id'],$credibility) && array_key_exists($gift['from_member_id'],$credibility))
				{
					$credibilityp[$gift['to_member_id']] += $credibilitypower[$gift['from_member_id']];
						if ($GLOBALS['FORUM_DRIVER']->is_staff($gift['from_member_id']))
						{
							$credibilitypstaff[$gift['to_member_id']] += $credibilitypower[$gift['from_member_id']];
						} else {
							$credibilitypuser[$gift['to_member_id']] += $credibilitypower[$gift['from_member_id']];
						}
				}
			}
			*/

			// Next, add credibility for having content featured by staff. One award = 10 credibility.
			$awards = $GLOBALS['SITE_DB']->query_select('award_archive', array('*'), null);
			foreach ($awards as $award)
			{
				if (array_key_exists($award['member_id'],$credibility))
				{
					$credibilityp[$award['member_id']] += 10;
					$credibilitypstaff[$award['member_id']] += 10;
				}
			}
			

			foreach ($credibility as $key => $value)
			{
				
			// Time for the fun part (muahaha). 
			// For every prosecution ever earned, lose 50 credibility.
			$credibilitym[$key] = $credibilitym[$key] + (50 * $numberprosecutions[$key]);
			$credibilitymstaff[$key] = $credibilitymstaff[$key] + (50 * $numberprosecutions[$key]);
			}
			
			// There are 15 custom fields relating to a user's reputation on site that staff members
			// keep track of. All 15 of these fields are an integer between 0 and 100. The higher
			// the number, the less reputable the user is for whatever the field describes.
			// So, we're going to fractionalized earned credibility depending on how bad their
			// reputation is as marked by staff. The worse the reputation, the more their earned
			// credibility will be fractionalized, which means the harder it is to earn credibility.
			// We're going to fractionalize at a rate of 5% for every 100 points of bad reputation.
			
			$members = $GLOBALS['SITE_DB']->query_select('f_member_custom_fields', array('*'), null);
			foreach ($members as $member)
			{
				$multiplier = 1;
				if (array_key_exists($member['mf_member_id'],$credibility))
				{
					$multiplier -= (0.0005 * $member['field_49']);
					$multiplier -= (0.0005 * $member['field_50']);
					$multiplier -= (0.0005 * $member['field_51']);
					$multiplier -= (0.0005 * $member['field_52']);
					$multiplier -= (0.0005 * $member['field_53']);
					$multiplier -= (0.0005 * $member['field_54']);
					$multiplier -= (0.0005 * $member['field_55']);
					$multiplier -= (0.0005 * $member['field_56']);
					$multiplier -= (0.0005 * $member['field_57']);
					$multiplier -= (0.0005 * $member['field_58']);
					$multiplier -= (0.0005 * $member['field_59']);
					$multiplier -= (0.0005 * $member['field_60']);
					$multiplier -= (0.0005 * $member['field_61']);
					$multiplier -= (0.0005 * $member['field_62']);
					$multiplier -= (0.0005 * $member['field_63']);
					
					$credibilitymstaff[$member['mf_member_id']] += integer_format($credibilityp[$member['mf_member_id']] * (1 - $multiplier));
					$credibilityp[$member['mf_member_id']] = $credibilityp[$member['mf_member_id']] * $multiplier;
					$credibilityp[$member['mf_member_id']] = integer_format($credibilityp[$member['mf_member_id']]);
				}
			}
			
			// finalize credibility calculations
			foreach ($credibility as $key => $value)
			{
				$credibility[$key] = integer_format($credibilityp[$key] - $credibilitym[$key]);
				
				// If user is permanently banned, they get lowest possible credibility: -500
				if ($isbanned[$key] == 1)
				{
					$credibility[$key] = -500;
					$credibilitypstaff[$key] = 0;
					$credibilitypuser[$key] = 0;
					$credibilitymuser[$key] = 0;
					$credibilitymstaff[$key] = 500;
				}
					
				// Finally, store the new credibilities
				$updater = $GLOBALS['SITE_DB']->query_update('f_member_custom_fields',array('field_64' => $credibility[$key], 'field_65' => $credibilitymstaff[$key], 'field_66' => $credibilitymuser[$key], 'field_67' => $credibilitypuser[$key], 'field_68' => $credibilitypstaff[$key]),array('mf_member_id' => $key));
			}
		
		}
		if (mt_rand(1,(288 * 3)) == 288)
		{
		require_code('global3');
		http_download_file('https://discordapp.com/api/webhooks/260827617899446274/zOpixTDLOx4rKLRL1CsSG50_ylvAgsB86UJ6jH9tfXUFSF0nTCfZpl56hIN6ZmURPVak', null, false, true, 'Composr', array('content' => 'I see dead people.'));
		}
		
		$ads = $GLOBALS['SITE_DB']->query_select('discord_ads', array('*'), null);
		foreach ($ads as $ad)
		{
			if (is_null($ad['next_publish']))
			{
				$nextmidnight = strtotime('+1 day midnight');
				$followingmidnight = strtotime('+2 days midnight');
				$publishtime = mt_rand($nextmidnight, $followingmidnight);
				$updater = $GLOBALS['SITE_DB']->query_update('discord_ads',array('next_publish' => $publishtime),array('ID' => $ad['ID']));
			}
			if (time() >= $ad['next_publish'] && !is_null($ad['next_publish']))
			{
				require_code('global3');
				http_download_file('https://discordapp.com/api/webhooks/260827617899446274/zOpixTDLOx4rKLRL1CsSG50_ylvAgsB86UJ6jH9tfXUFSF0nTCfZpl56hIN6ZmURPVak', null, false, true, 'Composr', array('content' => 'TLC+ Advertisement - ' . $ad['message']));
				$nextmidnight = strtotime('+1 day midnight');
				$followingmidnight = strtotime('+2 days midnight');
				$publishtime = mt_rand($nextmidnight, $followingmidnight);
				$updater = $GLOBALS['SITE_DB']->query_update('discord_ads',array('next_publish' => $publishtime, 'publishes_left' => ($ad['publishes_left'] - 1)),array('ID' => $ad['ID']));
				if (($ad['publishes_left'] - 1) <= 0)
					$updater = $GLOBALS['SITE_DB']->query_delete('discord_ads',array('ID' => $ad['ID']));
			}
		}
		return;	
    }

    public function add_activity($member, $weight, $time)
    {
		if(!array_key_exists($member,$this->popularityarray))
			$this->popularityarray[$member] = 0;
			
		$beginningtime = tz_time(time() - $this->lookbackseconds, get_site_timezone());
		$weight = $weight * (($time - $beginningtime) / $this->lookbackseconds);
		
		// Now, add the action's final weight to total, and to the specific member's, ONLY if the member exists
			if ($GLOBALS['FORUM_DRIVER']->get_username($member) != null)
			{
				$this->popularityarray[$member] = $this->popularityarray[$member] + $weight;
				if ($this->popularityarray[$member] > $this->maxpopularity)
					$this->maxpopularity = $this->popularityarray[$member];
			}
			
			
    }
}
