<?php /*

 Composr
 Copyright (c) ocProducts, 2004-2016

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license    http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright  ocProducts Ltd
 * @package    cns_warnings
 */

require_code('crud_module');

/**
 * Module page class.
 */
class Module_warnings extends Standard_crud_module
{
    public $lang_type = 'WARNING';
    public $select_name = 'SUBMITTER';
    public $select_name_description = '';
    public $redirect_type = '!';
    public $menu_label = 'MODULE_TRANS_NAME_warnings';
    public $table = 'f_warnings';
    public $orderer = 'w_time';
    public $orderer_is_multi_lang = false;
    public $title_is_multi_lang = true;

    /**
     * Find icon for this module, specifically to find an icon for the module's main sitemap node. Defined when there is no entry-point for a default page call.
     *
     * @return string Icon.
     */
    public function get_wrapper_icon()
    {
        return 'tabs/member_account/warnings';
    }

    /**
     * Find entry-points available within this module.
     *
     * @param  boolean $check_perms Whether to check permissions.
     * @param  ?MEMBER $member_id The member to check permissions as (null: current user).
     * @param  boolean $support_crosslinks Whether to allow cross links to other modules (identifiable via a full-page-link rather than a screen-name).
     * @param  boolean $be_deferential Whether to avoid any entry-point (or even return null to disable the page in the Sitemap) if we know another module, or page_group, is going to link to that entry-point. Note that "!" and "browse" entry points are automatically merged with container page nodes (likely called by page-groupings) as appropriate.
     * @return ?array A map of entry points (screen-name=>language-code/string or screen-name=>[language-code/string, icon-theme-image]) (null: disabled).
     */
    public function get_entry_points($check_perms = true, $member_id = null, $support_crosslinks = true, $be_deferential = false)
    {
        if (get_forum_type() != 'cns') {
            return null;
        }

        if ($be_deferential) {
            return null;
        }

        if ($check_perms) {
            cns_require_all_forum_stuff();
            if (!cns_may_warn_members()) {
                return null;
            }
        }

        return (!$check_perms || !is_guest($member_id)) ? (parent::get_entry_points()) : array();
    }

    public $title;

    /**
     * Module pre-run function. Allows us to know metadata for <head> before we start streaming output.
     *
     * @param  boolean $top_level Whether this is running at the top level, prior to having sub-objects called.
     * @param  ?ID_TEXT $type The screen type to consider for metadata purposes (null: read from environment).
     * @return ?Tempcode Tempcode indicating some kind of exceptional output (null: none).
     */
    public function pre_run($top_level = true, $type = null)
    {
        $type = get_param_string('type', 'browse');

        if (get_forum_type() != 'cns') {
            warn_exit(do_lang_tempcode('NO_CNS'));
        } else {
            cns_require_all_forum_stuff();
        }
        require_lang('cns_warnings');
        if (addon_installed('securitylogging')) {
            require_lang('submitban');
        }

        if ($type == 'history') {
            $this->title = get_screen_title('PUNITIVE_HISTORY');
        }

        if ($type == 'undo_charge') {
            $this->title = get_screen_title('UNDO_CHARGE');
        }

        if ($type == 'undo_probation') {
            $this->title = get_screen_title('UNDO_PROBATION');
        }

        if ($type == 'undo_banned_ip') {
            $this->title = get_screen_title('UNBAN_IP');
        }

        if ($type == 'undo_banned_member') {
            $this->title = get_screen_title('UNBAN_MEMBER');
        }

        if ($type == 'undo_silence_from_topic') {
            $this->title = get_screen_title('UNSILENCE_TOPIC');
        }

        if ($type == 'undo_silence_from_forum') {
            $this->title = get_screen_title('UNSILENCE_FORUM');
        }

        return parent::pre_run($top_level);
    }

    /**
     * Standard crud_module run_start.
     *
     * @param  ID_TEXT $type The type of module execution
     * @return Tempcode The output of the run
     */
    public function run_start($type)
    {
        require_code('cns_moderation_action');
        require_code('cns_moderation_action2');

        if (!cns_may_warn_members()) {
            access_denied('PRIVILEGE', 'warn_members');
        }

        if ($type == 'history') {
            return $this->history();
        }
        if ($type == 'undo_charge') {
            return $this->undo_charge();
        }
        if ($type == 'undo_probation') {
            return $this->undo_probation();
        }
        if ($type == 'undo_banned_ip') {
            return $this->undo_banned_ip();
        }
        if ($type == 'undo_banned_member') {
            return $this->undo_banned_member();
        }
        if ($type == 'undo_silence_from_topic') {
            return $this->undo_silence_from_topic();
        }
        if ($type == 'undo_silence_from_forum') {
            return $this->undo_silence_from_forum();
        }

        return new Tempcode();
    }

    /**
     * View the warning/punishment history for a member.
     *
     * @return Tempcode The output of the run
     */
    public function history()
    {
        require_code('templates_results_table');

        $member_id = get_param_integer('id');

        $rows = $GLOBALS['FORUM_DB']->query_select('f_warnings', array('*'), array('w_member_id' => $member_id), 'ORDER BY w_time');
        if (count($rows) == 0) {
            inform_exit(do_lang_tempcode('NO_ENTRIES'));
        }
        $max_rows = count($rows);

        $out = new Tempcode();
        $f = array(do_lang_tempcode('SLASH_OR', do_lang_tempcode('DATE'), do_lang_tempcode('BY')), do_lang('WHETHER_MAKE_WARNING'), do_lang('CHANGED_USERGROUP'), do_lang('PUNISHMENT_UNDOING'));
        $fields_title = results_field_title($f, array());
        foreach ($rows as $row) {
            $date = hyperlink(build_url(array('page' => '_SELF', 'type' => '_edit', 'id' => $row['id'], 'redirect' => get_self_url(true)), '_SELF'), get_timezoned_date($row['w_time']), false, true, $row['w_explanation']);
            $by = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_by']);
            $date_by = new Tempcode();
            $date_by->attach(do_lang_tempcode('SLASH_OR', $date, $by));

            $is_warning = escape_html($row['w_is_warning'] ? do_lang_tempcode('YES') : do_lang_tempcode('NO'));

            $changed_usergroup_from = escape_html((is_null($row['p_changed_usergroup_from']) ? do_lang_tempcode('NO') : do_lang_tempcode('YES')));
            $charged_points = ($row['p_charged_points'] == 0) ? new Tempcode() : div(hyperlink(build_url(array('page' => '_SELF', 'type' => 'undo_charge'), '_SELF'), do_lang_tempcode('RESTORE_POINTS', escape_html(integer_format($row['p_charged_points']))), false, true, '', null, form_input_hidden('id', strval($row['id']))), 'dsgsgdfgddgdf');
            $undoing = new Tempcode();
            if ($row['p_probation'] == 0) {
                $_undoing_link = new Tempcode();
            } else {
                $_undoing_url = build_url(array('page' => '_SELF', 'type' => 'undo_probation'), '_SELF');
                $_undoing_link = div(hyperlink($_undoing_url, do_lang_tempcode('REMOVE_PROBATION_DAYS', escape_html(integer_format($row['p_probation']))), false, false, '', null, form_input_hidden('id', strval($row['id']))), '46t54yhrtghdfhdhdfg');
            }
            $undoing->attach($_undoing_link);
            if (addon_installed('points')) {
                $undoing->attach($charged_points);
            }
            if ($row['p_banned_ip'] != '') {
                $undoing->attach(div(hyperlink(build_url(array('page' => '_SELF', 'type' => 'undo_banned_ip'), '_SELF'), do_lang_tempcode('UNBAN_IP'), false, true, '', null, form_input_hidden('id', strval($row['id']))), '4teryeryrydfhyhrgf'));
            }
            if ($row['p_banned_member'] == 1) {
                $undoing->attach(div(hyperlink(build_url(array('page' => '_SELF', 'type' => 'undo_banned_member'), '_SELF'), do_lang_tempcode('UNBAN_MEMBER'), false, true, '', null, form_input_hidden('id', strval($row['id']))), '56ytryrtyhrtyrt'));
            }
            if (!is_null($row['p_silence_from_topic'])) {
                $undoing->attach(div(hyperlink(build_url(array('page' => '_SELF', 'type' => 'undo_silence_from_topic'), '_SELF'), do_lang_tempcode('UNSILENCE_TOPIC'), false, true, '', null, form_input_hidden('id', strval($row['id']))), 'rgergdfhfhg'));
            }
            if (!is_null($row['p_silence_from_forum'])) {
                $undoing->attach(div(hyperlink(build_url(array('page' => '_SELF', 'type' => 'undo_silence_from_forum'), '_SELF'), do_lang_tempcode('UNSILENCE_FORUM'), false, true, '', null, form_input_hidden('id', strval($row['id']))), 'ghgfhfghggf'));
            }
            if ($undoing->is_empty()) {
                $undoing = do_lang_tempcode('NA_EM');
            }

            $g = array($date_by, $is_warning, $changed_usergroup_from, $undoing);
            $out->attach(results_entry($g, false));
        }
        $results_table = results_table(do_lang_tempcode('PUNITIVE_HISTORY'), 0, 'start', 1000000, 'max', $max_rows, $fields_title, $out, null, null, null, null, paragraph(do_lang_tempcode('PUNITIVE_HISTORY_TEXT'), '4t4ygyerhrth4'));

        $add_warning_url = build_url(array('page' => '_SELF', 'type' => 'add', 'id' => $member_id, 'redirect' => get_self_url(true)), '_SELF');
        $view_profile_url = $GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, false, true);
        $edit_profile_url = build_url(array('page' => 'members', 'type' => 'view', 'id' => $member_id), get_module_zone('members'), null, false, false, false, 'tab__edit');

        $tpl = do_template('CNS_WARNING_HISTORY_SCREEN', array(
            '_GUID' => '4444beed9305f0460a6c00e6c87d4208',
            'TITLE' => $this->title,
            'MEMBER_ID' => strval($member_id),
            'EDIT_PROFILE_URL' => $edit_profile_url,
            'VIEW_PROFILE_URL' => $view_profile_url,
            'ADD_WARNING_URL' => $add_warning_url,
            'RESULTS_TABLE' => $results_table,
        ));

        require_code('templates_internalise_screen');
        return internalise_own_screen($tpl);
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_charge()
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', array('id' => $id));
        $charged_points = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_charged_points', array('id' => $id));
        require_code('points2');
        charge_member($member_id, -$charged_points, do_lang('UNDO_CHARGE_FOR', strval($id)));
        $GLOBALS['FORUM_DB']->query_update('f_warnings', array('p_charged_points' => 0), array('id' => $id), '', 1);

        log_it('UNDO_CHARGE', strval($id), $GLOBALS['FORUM_DRIVER']->get_username($member_id));

        // Show it worked / Refresh
        $url = build_url(array('page' => '_SELF', 'type' => 'history', 'id' => $member_id), '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_probation()
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', array('id' => $id));
        $probation = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_probation', array('id' => $id));
        $on_probation_until = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_on_probation_until');
        if (!is_null($on_probation_until)) {
            $GLOBALS['FORUM_DB']->query_update('f_members', array('m_on_probation_until' => $on_probation_until - $probation * 60 * 60 * 24), array('id' => $member_id), '', 1);
        }
        $GLOBALS['FORUM_DB']->query_update('f_warnings', array('p_probation' => 0), array('id' => $id), '', 1);

        log_it('UNDO_PROBATION', strval($id), $GLOBALS['FORUM_DRIVER']->get_username($member_id));

        // Show it worked / Refresh
        $url = build_url(array('page' => '_SELF', 'type' => 'history', 'id' => $member_id), '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_banned_ip()
    {
        require_code('failure');

        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', array('id' => $id));
        $banned_ip = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_banned_ip', array('id' => $id));
        remove_ip_ban($banned_ip);
        $GLOBALS['FORUM_DB']->query_update('f_warnings', array('p_banned_ip' => ''), array('id' => $id), '', 1);

        log_it('UNBAN_IP', strval($id), $banned_ip);

        // Show it worked / Refresh
        $url = build_url(array('page' => '_SELF', 'type' => 'history', 'id' => $member_id), '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_banned_member()
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', array('id' => $id));
        $banned_member = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_banned_member', array('id' => $id));
        $GLOBALS['FORUM_DB']->query_update('f_members', array('m_is_perm_banned' => 0), array('id' => $member_id), '', 1);
        $GLOBALS['FORUM_DB']->query_update('f_warnings', array('p_banned_member' => 0), array('id' => $id), '', 1);

        log_it('UNBAN_MEMBER', strval($id), $GLOBALS['FORUM_DRIVER']->get_username($member_id));

        // Show it worked / Refresh
        $url = build_url(array('page' => '_SELF', 'type' => 'history', 'id' => $member_id), '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_silence_from_topic()
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', array('id' => $id));
        $silence_from_topic = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_silence_from_topic', array('id' => $id));
        $GLOBALS['SITE_DB']->query_delete('member_privileges', array(
            'member_id' => $member_id,
            'privilege' => 'submit_lowrange_content',
            'the_page' => '',
            'module_the_name' => 'topics',
            'category_name' => strval($silence_from_topic),
        ));
        $GLOBALS['FORUM_DB']->query_update('f_warnings', array('p_silence_from_topic' => null), array('id' => $id), '', 1);

        log_it('UNSILENCE_TOPIC', strval($id));

        // Show it worked / Refresh
        $url = build_url(array('page' => '_SELF', 'type' => 'history', 'id' => $member_id), '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Actualiser to undo a certain type of punitive action.
     *
     * @return Tempcode Result (redirect page)
     */
    public function undo_silence_from_forum()
    {
        $id = post_param_integer('id');
        $member_id = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'w_member_id', array('id' => $id));
        $silence_from_forum = $GLOBALS['FORUM_DB']->query_select_value('f_warnings', 'p_silence_from_forum', array('id' => $id));
        $GLOBALS['SITE_DB']->query_delete('member_privileges', array(
            'member_id' => $member_id,
            'privilege' => 'submit_lowrange_content',
            'the_page' => '',
            'module_the_name' => 'forums',
            'category_name' => strval($silence_from_forum),
        ));
        $GLOBALS['FORUM_DB']->query_update('f_warnings', array('p_silence_from_forum' => null), array('id' => $id), '', 1);

        log_it('UNSILENCE_FORUM', strval($id));

        // Show it worked / Refresh
        $url = build_url(array('page' => '_SELF', 'type' => 'history', 'id' => $member_id), '_SELF');
        return redirect_screen($this->title, $url, do_lang_tempcode('SUCCESS'));
    }

    /**
     * Get Tempcode for a warning adding/editing form.
     *
     * @param  boolean $new Whether it is a new warning/punishment record
     * @param  LONG_TEXT $explanation The explanation for the warning/punishment record
     * @param  BINARY $is_warning Whether to make this a formal warning
     * @param  ?MEMBER $member_id The member the warning is for (null: get from environment)
     * @return array A pair: the Tempcode for the visible fields, and the Tempcode for the hidden fields
     */
    public function get_form_fields($new = true, $explanation = '', $is_warning = 0, $member_id = null)
    {
        if (is_null($member_id)) {
            $member_id = get_param_integer('member_id', get_member());
        }

        $hidden = new Tempcode();
        $fields = new Tempcode();

        require_code('form_templates');

        // Information about their history, and the rules - to educate the warner/punisher
        if ($new) {

            $hidden->attach(form_input_hidden('member_id', strval($member_id)));

            $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
            $num_warnings = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_cache_warnings');
            $_rules_url = build_url(array('page' => 'rules'), '_SEARCH');
            $rules_url = $_rules_url->evaluate();
            $_history_url = build_url(array('page' => '_SELF', 'type' => 'history', 'id' => $member_id), '_SELF');
            $history_url = $_history_url->evaluate();
            $profile_url = $GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, false, true);
            if (is_object($profile_url)) {
                $profile_url = $profile_url->evaluate();
            }
            $this->add_text = do_lang_tempcode('HAS_ALREADY_X_WARNINGS', escape_html($username), escape_html(integer_format($num_warnings)), array(escape_html(get_site_name()), escape_html($rules_url), escape_html($history_url), escape_html($profile_url)));
        }

        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', array('_GUID' => 'cb4511a58a4c78eb75346a468e6e6fdf', 'TITLE' => do_lang_tempcode('MODULE_TRANS_NAME_warnings'))));
        
        $fields->attach(form_input_tick(do_lang_tempcode('WHETHER_MAKE_WARNING'), do_lang_tempcode('DESCRIPTION_WHETHER_MAKE_WARNING'), 'is_warning', $is_warning == 1));

        //hooks for punitive actions
        if ($new) {
$fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', array('_GUID' => '322a026b7a56a3e4e9ac58e4979add35', 'TITLE' => do_lang_tempcode('PUNITIVE_ACTIONS'))));    
            
        $punitive_hooks = find_all_hooks('modules', 'warnings_punitive');
    foreach (array_keys($punitive_hooks) as $hook) {

        require_code('hooks/modules/warnings_punitive/' . $hook);
        $object = object_factory('Hook_warnings_punitive_' . $hook, true);
        if (is_null($object)) {
            continue;
        }
        //$info = $object->info();
        //if ($info['active'])
            $object->UI($hidden, $fields);
    }
            
        }

        // Explanatory text and hooks
        $keep = symbol_tempcode('KEEP');
        $load_url = find_script('warnings_browse') . '?type=load' . $keep->evaluate();
        $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', array('_GUID' => 'c7eb70b13be74d8f3bd1f1c5e739d9aa', 'TITLE' => do_lang_tempcode('EXPLANATORY_TEXT'), 'HELP' => do_lang_tempcode('LOAD_SAVED_WARNING', escape_html($load_url)))));
        
        $fields->attach(form_input_line_comcode(do_lang_tempcode('EXPLANATION'), do_lang_tempcode('DESCRIPTION_EXPLANATION'), 'explanation', $explanation, true));
        
        if ($new) {
            
    $text_hooks = find_all_hooks('modules', 'warnings_text');
    foreach (array_keys($text_hooks) as $hook) {

        require_code('hooks/modules/warnings_text/' . $hook);
        $object = object_factory('Hook_warnings_text_' . $hook, true);
        if (is_null($object)) {
            continue;
        }
        $info = $object->info();
        if ($info['active'])
            $object->UI($hidden, $fields);
    }
            
            }
            $fields->attach(do_template('FORM_SCREEN_FIELD_SPACER', array('_GUID' => 'c745535395edf114d20a8a8eafe73b92', 'TITLE' => do_lang_tempcode('ACTIONS'))));

        return array($fields, $hidden);
    }

    /**
     * Standard crud_module table function.
     *
     * @param  array $url_map Details to go to build_url for link to the next screen.
     * @return array A quartet: The choose table, Whether re-ordering is supported from this screen, Search URL, Archive URL.
     */
    public function create_selection_list_choose_table($url_map)
    {
        require_code('templates_results_table');

        $current_ordering = get_param_string('sort', 'w_time DESC', true);
        if (strpos($current_ordering, ' ') === false) {
            warn_exit(do_lang_tempcode('INTERNAL_ERROR'));
        }
        list($sortable, $sort_order) = explode(' ', $current_ordering, 2);
        $sortables = array(
            'w_time' => do_lang_tempcode('DATE'),
        );
        if (addon_installed('points')) {
            $sortables['p_charged_points'] = do_lang_tempcode('POINTS');
        }
        if (((strtoupper($sort_order) != 'ASC') && (strtoupper($sort_order) != 'DESC')) || (!array_key_exists($sortable, $sortables))) {
            log_hack_attack_and_exit('ORDERBY_HACK');
        }

        $fh = array(
            do_lang_tempcode('USERNAME'),
            do_lang_tempcode('BY'),
            do_lang_tempcode('DATE'),
        );
        if (addon_installed('points')) {
            $fh[] = do_lang_tempcode('POINTS');
        }
        $fh[] = do_lang_tempcode('ACTIONS');

        $header_row = results_field_title($fh, $sortables, 'sort', $sortable . ' ' . $sort_order);

        $fields = new Tempcode();

        require_code('form_templates');
        list($rows, $max_rows) = $this->get_entry_rows(false, $current_ordering);
        foreach ($rows as $row) {
            $edit_link = build_url($url_map + array('id' => $row['id']), '_SELF');

            $username = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_member_id'], false, '', false);
            $by = $GLOBALS['FORUM_DRIVER']->member_profile_hyperlink($row['w_by']);

            $map = array(
                protect_from_escaping($username),
                protect_from_escaping($by),
                get_timezoned_date($row['w_time']),
            );

            if (addon_installed('points')) {
                $map[] = integer_format($row['p_charged_points']);
            }

            $map[] = protect_from_escaping(hyperlink($edit_link, do_lang_tempcode('EDIT'), false, true, do_lang('EDIT') . ' #' . strval($row['id'])));

            $fields->attach(results_entry($map, true));
        }

        $search_url = null;
        $archive_url = null;

        return array(results_table(do_lang($this->menu_label), get_param_integer('start', 0), 'start', get_param_integer('max', 20), 'max', $max_rows, $header_row, $fields, $sortables, $sortable, $sort_order), false, $search_url, $archive_url);
    }

    /**
     * Standard crud_module list function.
     *
     * @return Tempcode The selection list
     */
    public function create_selection_list_entries()
    {
        $_m = $GLOBALS['FORUM_DB']->query_select('f_warnings', array('*'), null, 'ORDER BY w_time DESC');
        $entries = new Tempcode();
        foreach ($_m as $m) {
            $entries->attach(form_input_list_entry(strval($m['id']), false, $GLOBALS['FORUM_DRIVER']->get_username($m['w_member_id']) . ' (' . get_timezoned_date($m['w_time']) . ')'));
        }

        return $entries;
    }

    /**
     * Standard crud_module edit form filler.
     *
     * @param  ID_TEXT $id The entry being edited
     * @return array A pair: the Tempcode for the visible fields, and the Tempcode for the hidden fields
     */
    public function fill_in_edit_form($id)
    {
        $warning = $GLOBALS['FORUM_DB']->query_select('f_warnings', array('w_explanation', 'w_by', 'w_member_id', 'w_is_warning'), array('id' => intval($id)), '', 1);
        if (!array_key_exists(0, $warning)) {
            warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
        }

        return $this->get_form_fields(false, $warning[0]['w_explanation'], $warning[0]['w_is_warning'], $warning[0]['w_member_id']);
    }

    /**
     * Standard crud_module add actualiser.
     *
     * @return ID_TEXT The entry added
     */
    public function add_actualisation()
    {
    $explanation=post_param_string('explanation');
    $member_id=post_param_integer('member_id');
    $message=post_param_string('message','');
    $violatingrule=post_param_string('violatingrule','');
    $additionaldiscipline=post_param_string('additionaldiscipline','');
    $furtheractions=post_param_string('furtheractions','');
    $discipline_appeal=post_param_integer('discipline_appeal',0);
    $demerits = $GLOBALS['SITE_DB']->query_select_value_if_there('f_member_custom_fields', 'field_40', array('mf_member_id' => $member_id));
    if ($demerits == null || $demerits == '' || !$demerits)
    $karma = 0;
    $newdemerits = post_param_integer('new_demerits');
    if ($newdemerits < 0 || $newdemerits > 100)
    warn_exit(do_lang_tempcode('BAD_KARMA_RANGE'));
        $username = $GLOBALS['FORUM_DRIVER']->get_username($member_id);
        if (is_null($username)) {
            warn_exit(do_lang_tempcode('_MEMBER_NO_EXIST', escape_html($username)));
        }

        $save = '';
        if ($save != '') {
            $GLOBALS['FORUM_DB']->query_delete('f_saved_warnings', array('s_title' => $save), '', 1);
            $GLOBALS['FORUM_DB']->query_insert('f_saved_warnings', array(
                's_title' => $save,
                's_explanation' => $explanation,
                's_message' => $message,
            ));
        }


        // Topic silencing
        $silence_from_topic = post_param_integer('topic_id', null);
        if (!is_null($silence_from_topic)) {
            $_silence_from_topic = post_param_date('silence_from_topic');
            $GLOBALS['SITE_DB']->query_delete('member_privileges', array(
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'topics',
                'category_name' => strval($silence_from_topic),
            ));

            require_code('cns_general_action2');
            cns_mod_log_it('SILENCE_FROM_TOPIC', strval($member_id), strval($silence_from_topic));
        } else {
            $_silence_from_topic = null;
        }
        if (!is_null($_silence_from_topic)) {
            $GLOBALS['SITE_DB']->query_insert('member_privileges', array(
                'active_until' => $_silence_from_topic,
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'topics',
                'category_name' => strval($silence_from_topic),
                'the_value' => '0'
            ));
        } else {
            $silence_from_topic = null;
        }

        // Forum silencing
        $silence_from_forum = post_param_integer('forum_id', null);
        if (!is_null($silence_from_forum)) {
            $GLOBALS['SITE_DB']->query_delete('member_privileges', array(
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
            ));
            $GLOBALS['SITE_DB']->query_delete('member_privileges', array(
                'member_id' => $member_id,
                'privilege' => 'submit_midrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
            ));
            $_silence_from_forum = post_param_date('silence_from_forum');

            require_code('cns_general_action2');
            cns_mod_log_it('SILENCE_FROM_FORUM', strval($member_id), strval($silence_from_forum));
        } else {
            $_silence_from_forum = null;
        }
        if (!is_null($_silence_from_forum)) {
            $GLOBALS['SITE_DB']->query_insert('member_privileges', array(
                'active_until' => $_silence_from_forum,
                'member_id' => $member_id,
                'privilege' => 'submit_lowrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
                'the_value' => '0'
            ));
            $GLOBALS['SITE_DB']->query_insert('member_privileges', array(
                'active_until' => $_silence_from_forum,
                'member_id' => $member_id,
                'privilege' => 'submit_midrange_content',
                'the_page' => '',
                'module_the_name' => 'forums',
                'category_name' => strval($silence_from_forum),
                'the_value' => '0'
            ));
        } else {
            $silence_from_forum = null;
        }

        // Probation
        $probation = post_param_integer('probation', 0);
        if (has_privilege(get_member(), 'probate_members')) {
            if ($probation != 0) {
                $on_probation_until = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_on_probation_until');
                if ((is_null($on_probation_until)) || ($on_probation_until < time())) {
                    $on_probation_until = time();
                }
                $on_probation_until += $probation * 60 * 60 * 24;
                $GLOBALS['FORUM_DB']->query_update('f_members', array('m_on_probation_until' => $on_probation_until), array('id' => $member_id), '', 1);

                require_code('cns_general_action2');
                cns_mod_log_it('PUT_ON_PROBATION', strval($member_id), $username);
            }
        }

        // Ban member
        if (has_privilege(get_member(), 'member_maintenance')) {
            $banned_member = post_param_integer('banned_member', 0);
            if ($banned_member == 1) {
                $GLOBALS['FORUM_DB']->query_update('f_members', array('m_is_perm_banned' => 1), array('id' => $member_id), '', 1);

                require_code('cns_general_action2');
                cns_mod_log_it('BAN_MEMBER', strval($member_id), $username);
            }
        } else {
            $banned_member = 0;
        }

        // IP ban
        $banned_ip = '';
        if (addon_installed('securitylogging')) {
            if (has_actual_page_access(get_member(), 'admin_ip_ban')) {
                $_banned_ip = post_param_integer('banned_ip', 0);
                if ($_banned_ip == 1) {
                    $banned_ip = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_ip_address');
                    require_code('failure');
                    add_ip_ban($banned_ip);
                }
            }
        }

        // Stop Forum Spam report
        $stopforumspam = post_param_integer('stopforumspam', 0);
        if ($stopforumspam == 1) {
            $banned_ip = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_ip_address');
            require_code('failure');
            require_code('failure_spammers');
            syndicate_spammer_report($banned_ip, $username, $GLOBALS['FORUM_DRIVER']->get_member_email_address($member_id), $explanation, true);

            require_code('cns_general_action2');
            cns_mod_log_it('MARK_AS_SPAMMER', strval($member_id), $username);
        }

        // Change group
        $changed_usergroup_from = null;
        if (has_privilege(get_member(), 'member_maintenance')) {
            $__changed_usergroup_from = post_param_string('changed_usergroup_from');
            if ($__changed_usergroup_from == '') {
                $_changed_usergroup_from = null;
            } else {
                $_changed_usergroup_from = intval($__changed_usergroup_from);
            }
            if ((!is_null($_changed_usergroup_from)) && ($_changed_usergroup_from != -1)) {
                $changed_usergroup_from = $GLOBALS['FORUM_DRIVER']->get_member_row_field($member_id, 'm_primary_group');
                $GLOBALS['FORUM_DB']->query_update('f_members', array('m_primary_group' => $_changed_usergroup_from), array('id' => $member_id), '', 1);
            }
        }
        
        // Change Demerits
        $GLOBALS['FORUM_DB']->query_update('f_member_custom_fields', array('field_40' => $newdemerits), array('mf_member_id' => $member_id), '', 1);

        // Prepare to charge points (used in cns_make_warning)
        $charged_points = post_param_integer('charged_points', 0);
        
              // Send PT
    if ($message!='')
    {
      require_code('cns_topics_action');
      require_code('cns_topics_action2');
      require_code('cns_posts_action');
      require_code('cns_posts_action2');
      
           
      if(post_param_integer('is_warning',0)==1)
      {      
      $_message = "[semihtml]<h1>We have issued a prosecution for an issue: " . $explanation . "</h1>
      <h2>Introduction</h2>
        Greetings " . $GLOBALS['FORUM_DRIVER']->get_username($member_id) . ",<br><br>
                               
        We regret to inform you that due to a violation of the Terms of Service, located at <a href=\"https://lovinity.org/forum/rules.htm\">https://lovinity.org/forum/rules.htm</a>, the staff are issuing a prosecution against your account. Please read this message carefully in order to learn about what we found was in violation, how it was in violation, why the rule is important, what discipline has been issued against you, and what you should do from here on out.<br>
                               <h2>Violating Content</h2>
                               According to The Lovinity Community+ Staff, the following content of yours was found to be in violation of the Terms of Use: <br><br>
                               
                            " . $message . "<br>
                               <h2>Reason(s) for Violation</h2>   
                               " . $violatingrule . "<br>
                               
      ";
      
      $_message .= "<h2>Disciplinary Actions</h2>
        The following is a list of disciplinary actions applied to you by staff as a result of this violation:<br /><ul>";
      if($demerits != $newdemerits)
      {
      $_message .= "<strong>Demerits:</strong> You have been issued demerits as a result of your violation. Your account now has <strong>" . $newdemerits . "</strong> demerits. For every day you log in to The Lovinity Community+, 2 demerits will be removed. If your account accumulates 100 demerits at any time, you could be suspended or banned.";
      }
      
      if ($_banned_ip==1)
      {
        $_message .= "<li><strong>Permanent Ban:</strong> We regret to inform you that you have been permanently banned from The Lovinity Community+, and therefore are no longer welcome to use any of our services for any purpose.</li>";
      }
      
      if ($banned_member==1 && $_banned_ip!=1)
      {
        $_message .= "<li><strong>Account Suspension:</strong> We regret to inform you that your account has been suspended and therefore you cannot log in. Please be aware you have to appeal in order to have your suspension lifted. Please read the What You Should Do section for more information.</li>";
      }
      
      if ($probation!=0)
      {
        $_message .= "<li><strong>Probation Time:</strong> We have issued you " . $probation . " days of probation (if you were already on probation, this time has been added on). This means you will have limited access to The Lovinity Community's features and may be subject to moderator approval of submitted content from now until " . date('Y-m-d H:i:s',$on_probation_until) . " .</li>";
      }
      
      if ((!is_null($_changed_usergroup_from)) && ($_changed_usergroup_from!=-1))
      {
        $_message .= "<li><strong>Usergroup Membership Change:</strong> Your primary usergroup membership has been changed.</li>";
      }
      
      if ($charged_points != 0)
      {
        require_code('points');
        $_message .= "<li><strong>Yang fine/penalty:</strong> We have taken away from you " . $charged_points . " Yang. Your new Yang balance is " . (available_points($member_id) - $charged_points) . " .</li>";
      }
      
      if(!is_null($silence_from_topic))
      {
        $_message .= "<li><strong>Topic Silence:</strong> We have taken away your privilege to engage in topic ID " . $silence_from_topic;
        if (!is_null($_silence_from_topic))
        {
          $_message .= " until " . date('Y-m-d H:i:s',$_silence_from_topic) . " .</li>";
        } else {
          $_message .= " .</li>";
        }
      }
      
      if(!is_null($silence_from_forum))
      {
        $_message .= "<li><strong>Forum Silence:</strong> We have taken away your privilege to engage in forum ID " . $silence_from_forum;
        if (!is_null($_silence_from_forum))
        {
          $_message .= " until " . date('Y-m-d H:i:s',$_silence_from_forum) . " .</li>";
        } else {
          $_message .= " .</li>";
        }
      }
      
      if ($stopforumspam==1)
      {
        $_message .= "<li><strong>Spam Blacklist Report:</strong> Because of your spamming, we have reported you to spam blacklist services such as Stop Forum Spam.</li>";
      }
      
      $_message .= "</ul>";
      
      if($additionaldiscipline != '')
      {
        $_message .= "<br>In addition to the above punitive actions, we have also done the following:<br>" . $additionaldiscipline . "<br>";
      }
      
      $_message .= "<strong>Please be aware that any attempts to bypass these disciplinary sanctions (with the exception of a proper appeal process) can and will result in more severe punishment and a possible permanent ban.</strong><br>";
      
      $_message .= "<h2>What You Should Do</h2><br>";
      
      if ($_banned_ip==1)
      {
        $_message .= "Unfortunately, we have decided to permanently ban you from The Lovinity Community+. Therefore there is nothing more you can do. If you enjoyed our website, then please consider finding another website like us (once you improve on your conduct first, of course). <br><br>";
      } else {
      $_message .= "First and foremost, be sure to thoroughly give our Terms of Use / rules another read located at <a href=\"https://lovinity.org/forum/rules.htm\">https://lovinity.org/forum/rules.htm</a> , including the Terms of Use, Privacy Policy, and Safe Space Policy docs. Be sure to ask staff any questions you have with these rules, especially if you are unclear on them. Please remember, ignorance of the rules is not an excuse.
        <br><br>";
      }
      
      if ($banned_member==1 && $_banned_ip!=1)
      {
        $_message .= "<strong>You will at some point need to file an appeal to have your suspension lifted.</strong> Appealing a suspension involves waiting a specified amount of time (if specified), and then submitting a formal letter of apology to the staff (via. support tickets or via. an email to support@lovinity.org). This letter should be well constructed and contain what you are sorry for, that you realize you shouldn't have done what you did, what you have learned from this, what you will do differently from now on, and that you won't violate the rules again. Your letter will then be reviewed, and if staff are convinced, you will be instructed on what to do next. Full cooperation is necessary in a suspension appeal. Without full cooperation, your suspension will be extended and you'll be asked to meditate longer on what you did and file another appeal later. <br><br>";
      }
        
      
      if(!is_null($furtheractions))
      {
        $_message .= "In addition, the staff have provided the following actions you should take: <br><br>" . $furtheractions . "<br>";
      }
      
      $_message .= "<h2>Disciplinary Appeal</h2>";
      
      if($discipline_appeal==1)
      {
        $_message .= "The staff have indicated that you may appeal this discipline within 72 hours from this message if you either feel that you were unfairly disciplined for this violation. ";
        if($_banned_ip==1)
        {
          $_message .= "Since you are permanently banned and cannot access our website to view the rules, you will need to email support@lovinity.org to get instructions on how to appeal (within 72 hours from now). Please do not let any more than 72 hours pass between when we reply to you and when you reply back to us, even if it means emailing to let us know you're still working on the task (give a progress report). Otherwise, staff may close the appeal case and you won't be able to appeal it anymore.<br>";
        } else {
          $_message .= "For more information on how to appeal discipline, please see the \"X. Appeals\" item in the rules and click it to read more information. When communicating about the appeal, please do not let any more than 72 hours lapse between when we contact you and when you reply back, even if it means letting us know you're still working on the task (give a progress report). Otherwise, staff may close the appeal case and thus you won't be able to appeal it anymore.<br>";
        }
      } else {
        $_message .= "Unfortunately, staff have indicated that for this specific violation, it cannot be appealed. This may be because the evidence is too solid for staff to be able to allow an appeal. Such case may be for example when an outsider requests the removal of copyright infringing material from our site and has provided proof of ownership, or when logs clearly indicate you have attempted to hack the website.<br>";
      }
      
      $_message .= "<h2>Closing</h2>
        In closing, thank you for understanding the situation as well as for your cooperation. Please remember that you can contact staff at any time should you have any issues or concerns. To contact them, you can do one of three things:
        <br><ul>
        <li>Reply to this private topic via. the website, given you aren't suspended nor permanently banned.</li>
        <li>Submit a new support ticket, even as a guest if you need to, at <a href=\"https://lovinity.org/tickets.htm\">https://lovinity.org/tickets.htm</a> , considering you aren't permanently banned .</li>
        <li>Email support@lovinity.org from the email address you registered on our website with (include your username in the email). Please only email us if the above two options are not possible.</li></ul>
      
      [/semihtml]";
      $_title=do_lang('NEW_WARNING_TO_YOU',$explanation);
      } else {
      $_message = "[semihtml]<h1>We need to discuss an issue: " . $explanation . "</h1>
      <h2>Introduction</h2>
      Greetings " . $GLOBALS['FORUM_DRIVER']->get_username($member_id) . ",<br><br>
      
      We are concerned because the staff has observed a Terms of Use violation (the rules are located at <a href=\"https://lovinity.org/forum/rules.htm\">https://lovinity.org/forum/rules.htm</a>). We would like to discuss this matter with you and/or ask you to remedy this situation in order to prevent future problems. Please read this message carefully to learn what you need to do.
      <h2>Violating Content</h2>
                               According to The Lovinity Community+ Staff, the following content of yours was found to be in violation of the Terms of Use: <br><br>
                               
                            " . $message . "<br>
                               <h2>Reason(s) for Violation</h2>   
                               " . $violatingrule . "<br>
                               
      ";
      
      $_message .= "<h2>Personal Accountability</h2>
      We wish for you to take personal accountability for your actions. By doing so, future issues and the need for further discipline will be avoided.<br><br>
";
      if(!is_null($furtheractions))
      {
        $_message .= "The staff have provided the following information for you in terms of what you need to do to take personal accountability: <br><br> " . $furtheractions . " <br>";
      } else {
		$_message .= "Please reply to staff within 72 hours in order to discuss this matter.";
		}
      
     $_message .= "<h2>Initial discipline</h2>
        The following initial disciplinary actions, if any, have been applied to you, in order to prevent further issues:<br /><ul>";
      if($demerits != $newdemerits)
      {
      $_message .= "<strong>Demerits</strong> Staff have issued demerits as a result of this violation. Your account how has <strong>" . $newdemerits . "</strong> demerits. For every day you log in to The Lovinity Community+, 2 demerits will be removed. Please be aware if you accumulate 100 demerits at any time, you could be suspended or banned.";
      }
      
      if ($_banned_ip==1)
      {
        $_message .= "<li><strong>Permanent Ban:</strong> We regret to inform you that you have been permanently banned from The Lovinity Community+, and therefore are no longer welcome to use any of our services for any purpose.</li>";
      }
      
      if ($banned_member==1 && $_banned_ip!=1)
      {
        $_message .= "<li><strong>Account Suspension:</strong> We regret to inform you that we have suspended your account, and therefore you cannot log in. Please be aware you have to appeal in order to have your suspension lifted. Please read the What You Should Do section for more information.</li>";
      }
      
      if ($probation!=0)
      {
        $_message .= "<li><strong>Probation Time:</strong> We have issued you " . $probation . " days of probation (if you were already on probation, this time has been added on). This means you will have limited access to The Lovinity Community's features and may be subject to moderator approval of submitted content from now until " . date('Y-m-d H:i:s',$on_probation_until) . " .</li>";
      }
      
      if ((!is_null($_changed_usergroup_from)) && ($_changed_usergroup_from!=-1))
      {
        $_message .= "<li><strong>Usergroup Membership Change:</strong> Your primary usergroup membership has been changed.</li>";
      }
      
      if ($charged_points != 0)
      {
        require_code('points');
        $_message .= "<li><strong>Yang fine/penalty:</strong> We have taken away from you " . $charged_points . " Yang. Your new Yang balance is " . (available_points($member_id) - $charged_points) . " .</li>";
      }
      
      if(!is_null($silence_from_topic))
      {
        $_message .= "<li><strong>Topic Silence:</strong> We have taken away your privilege to engage in topic ID " . $silence_from_topic;
        if (!is_null($_silence_from_topic))
        {
          $_message .= " until " . date('Y-m-d H:i:s',$_silence_from_topic) . " .</li>";
        } else {
          $_message .= " .</li>";
        }
      }
      
      if(!is_null($silence_from_forum))
      {
        $_message .= "<li><strong>Forum Silence:</strong> We have taken away your privilege to engage in forum ID " . $silence_from_forum;
        if (!is_null($_silence_from_forum))
        {
          $_message .= " until " . date('Y-m-d H:i:s',$_silence_from_forum) . " .</li>";
        } else {
          $_message .= " .</li>";
        }
      }
      
      if ($stopforumspam==1)
      {
        $_message .= "<li><strong>Spam Blacklist Report:</strong> Because of your spamming, we reported you to spam blacklist services such as Stop Forum Spam.</li>";
      }
      
      $_message .= "</ul>";
      
      if($additionaldiscipline != '')
      {
        $_message .= "<br>In addition to the above actions, staff have also done the following:<br>" . $additionaldiscipline . "<br>";
      }
      
      $_message .= "<strong>Please be aware that any attempts to bypass these disciplinary sanctions (with the exception of a proper appeal process) can and will result in more severe punishment and a possible permanent ban.</strong><br>";
		  
	$_message .= "<h2>Disagreements</h2>
	If you disagree with the accusations made on you, please contact staff within 72 hours of this message to appeal it. In order to appeal, you must include proof / justification as to why this accusation is unfair. Multiple staff will review your claim before making a decision.<br>";
      
      $_message .= "<h2>Closing</h2>
        In closing, thank you for understanding the situation as well as for your cooperation. Please remember that you can contact staff at any time should you have any issues or concerns. To contact them, you can do one of three things:
        <br><ul>
        <li>Reply to this private topic via. the website, given you aren't suspended nor permanently banned.</li>
        <li>Submit a new support ticket, even as a guest if you need to, at <a href=\"https://lovinity.org/tickets.htm\">https://lovinity.org/tickets.htm</a> , considering you aren't permanently banned .</li>
        <li>Email support@lovinity.org from the email address you registered on our website with (include your username in the email). Please only email us if the above two options are not possible.</li></ul>
      
      [/semihtml]";            
      
      $_title=do_lang('NEW_WARRANT_TO_YOU',$explanation);
      }
      $message = $_message;


      $pt_topic_id=cns_make_topic(NULL,'','',1,1,0,0,0,get_member(),$member_id);
      $post_id=cns_make_post($pt_topic_id,$_title,$message,0,true,1,1,NULL,NULL,NULL,NULL,NULL,NULL,NULL,false);

      send_pt_notification($post_id,$_title,$pt_topic_id,$member_id);
    }

        // Make the warning
        $warning_id = cns_make_warning($member_id, $explanation, null, null, post_param_integer('is_warning', 0), $silence_from_topic, $silence_from_forum, $probation, $banned_ip, $charged_points, $banned_member, $changed_usergroup_from);

	//Discord server push
	require_code('global3');
	require_code('images');
	require_code('addons');
	$thumbfields = array();
	$addonthumb = find_addon_icon('cns_warnings');
	$params = array($addonthumb,'36x36','addon_icon_normalise','','','pad','both','#FFFFFF00');
	$ensurethumb = _symbol_thumbnail($params);
	$thumbfields['url'] = $ensurethumb;
	$postparam = array();
	$embedfields = array();
	$embedfields[0] = array('name' => 'Handling Staff', 'value' => $GLOBALS['FORUM_DRIVER']->get_username(get_member()));
	$embedfields[1] = array('name' => 'Disciplined User', 'value' => $GLOBALS['FORUM_DRIVER']->get_username($member_id));
	$embedfields[2] = array('name' => 'Explanation Provided', 'value' => $explanation);
	$embedfields[3] = array('name' => 'Type of Discipline', 'value' => (post_param_integer('is_warning',0)==1) ? 'Prosecution' : 'Accountability / Warning');
	$embedfields[4] = array('name' => 'Permanent Ban (IP) Issued', 'value' => ($_banned_ip==1) ? 'Yes' : 'No');
	$embedfields[5] = array('name' => 'Suspension (Member Ban) Issued', 'value' => ($banned_member==1) ? 'Yes' : 'No');
	$embedfields[6] = array('name' => 'Days of Probation Issued', 'value' => ($probation==0) ? 'None' : $probation . ' days (On probation until ' . date('Y-m-d H:i:s',$on_probation_until) . ')');
	$embedfields[7] = array('name' => 'Demerit Change', 'value' => $demerits . ' -> ' . $newdemerits);
	$embedfields[8] = array('name' => 'Yang Fine', 'value' => $charged_points . ' Yang');
	$embedfields[9] = array('name' => 'Topic Silence', 'value' => (is_null($silence_from_topic)) ? 'None' : 'ID ' . $silence_from_topic . ' until ' . date('Y-m-d H:i:s',$_silence_from_topic));
	$embedfields[10] = array('name' => 'Forum Silence', 'value' => (is_null($silence_from_forum)) ? 'None' : 'ID ' . $silence_from_forum . ' until ' . date('Y-m-d H:i:s',$_silence_from_forum));
	$embedfields[11] = array('name' => 'Spam Blocklist Syndication', 'value' => ($stopforumspam==1) ? 'Yes' : 'No');
	$embedfields[12] = array('name' => 'Primary Usergroup Change', 'value' => ((!is_null($_changed_usergroup_from)) && ($_changed_usergroup_from!=-1)) ? 'Yes' : 'No');
	$embeds = array();
	$embeds[0] = array('title' => 'A staff member has issued discipline', 'color' => '255', 'thumbnail' => $thumbfields, 'fields' => $embedfields);
	$postparam['embeds'] = $embeds;
	$postparam['content'] = '<@&264468338254544896>';	
	$postparam = json_encode($postparam);
	http_download_file('https://discordapp.com/api/webhooks/287989749447393282/XJoqmdYbDU79AACabGdhSMdsXLfu0-jQSwO20x9ynZmRYdRhQLpjokfpxnkb4r1vkZKr', null, false, true, 'Composr', array($postparam), null, null, null, null, null, null, null, 6.0, true, null, null, null, 'application/json');



    log_it('LOG_WARNING',"Member " . strval($member_id) . ", Warning #" . $warning_id,"Explanation: " . $explanation . ", Prosecution?: " . post_param_integer('is_warning',0));
        // Charge points
        if (addon_installed('points')) {
            if (has_actual_page_access(get_member(), 'admin_points')) {
                if ($charged_points != 0) {
                    require_code('points2');
                    charge_member($member_id, $charged_points, do_lang('FOR_PUNISHMENT', strval($warning_id)));
                }
            }
        }

        if (get_param_string('redirect', '') == '') {
            require_code('site2');
            assign_refresh($GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true, true), 0.0);
        }

        return strval($warning_id);
    }

    /**
     * Standard crud_module edit actualiser.
     *
     * @param  ID_TEXT $id The entry being edited
     */
    public function edit_actualisation($id)
    {
        $member_id = cns_edit_warning(intval($id), post_param_string('explanation'), post_param_integer('is_warning', 0));

        if (get_param_string('redirect', '') == '') {
            require_code('site2');
            assign_refresh($GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true, true), 0.0);
        }
    }

    /**
     * Standard crud_module submitter getter.
     *
     * @param  ID_TEXT $id The entry for which the submitter is sought
     * @return array The submitter, and the time of submission (null submission time implies no known submission time)
     */
    public function get_submitter($id)
    {
        $rows = $GLOBALS['FORUM_DB']->query_select('f_warnings', array('w_by', 'w_time'), array('id' => intval($id)), '', 1);
        if (!array_key_exists(0, $rows)) {
            return array(null, null);
        }
        return array($rows[0]['w_by'], $rows[0]['w_time']);
    }

    /**
     * Standard crud_module delete actualiser.
     *
     * @param  ID_TEXT $id The entry being deleted
     */
    public function delete_actualisation($id)
    {
        $member_id = cns_delete_warning(intval($id));

        if (get_param_string('redirect', '') == '') {
            require_code('site2');
            assign_refresh($GLOBALS['FORUM_DRIVER']->member_profile_url($member_id, true, true), 0.0);
        }
    }
}
