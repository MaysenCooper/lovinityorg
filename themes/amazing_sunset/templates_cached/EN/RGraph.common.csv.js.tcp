<?php
return unserialize("a:5:{i:0;a:1:{i:0;a:1:{i:0;a:5:{i:0;s:33:\"tcpfunc_58dc766f7a9dd8.65378745_1\";i:1;a:0:{}i:2;i:1;i:3;s:0:\"\";i:4;s:0:\"\";}}}i:1;a:0:{}i:2;s:17:\"RGraph.common.csv\";i:3;N;i:4;a:1:{s:33:\"tcpfunc_58dc766f7a9dd8.65378745_1\";s:9536:\"\$tpl_funcs['tcpfunc_58dc766f7a9dd8.65378745_1']=\$KEEP_TPL_FUNCS['tcpfunc_58dc766f7a9dd8.65378745_1']=recall_named_function('58dc766f7a9e92.58289191','\$parameters,\$cl',\"echo \\\"// version: 2016-12-05\\\\n    /**\\\\n    * o--------------------------------------------------------------------------------o\\\\n    * | This file is part of the RGraph package - you can learn more at:               |\\\\n    * |                                                                                |\\\\n    * |                          http://www.rgraph.net                                 |\\\\n    * |                                                                                |\\\\n    * | RGraph is licensed under the Open Source MIT license. That means that it's     |\\\\n    * | totally free to use!                                                           |\\\\n    * o--------------------------------------------------------------------------------o\\\\n    */\\\\n\\\\n    /**\\\\n    * Initialise the various objects\\\\n    */\\\\n    RGraph = window.RGraph || {isRGraph: true};\\\\n\\\\n\\\\n\\\\n\\\\n    RGraph.CSV = function (url, func)\\\\n    {\\\\n        var RG  = RGraph,\\\\n            ua  = navigator.userAgent,\\\\n            ma  = Math;\\\\n\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * Some default values\\\\n        */\\\\n        this.url       = url;\\\\n        this.ready     = func;\\\\n        this.data      = null;\\\\n        this.numrows   = null;\\\\n        this.numcols   = null;\\\\n        this.seperator = arguments[2] || ',';\\\\n        this.endofline = arguments[3] || /\\\\\\\\r?\\\\\\\\n/;\\\\n        this.uid       = RGraph.createUID();\\\\n\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * A Custom split function\\\\n        * \\\\n        * @param string str  The CSV string to split\\\\n        * @param mixed  char The character to split on - or it can also be an object like this:\\\\n        *                    {\\\\n        *                        preserve: false, // Whether to preserve whitespace\\\\n        *                        char: ','        // The character to split on\\\\n        *                    }\\\\n        */\\\\n        this.splitCSV = function (str, split)\\\\n        {\\\\n            // Defaults\\\\n            var arr            = [];\\\\n            var field          = '';\\\\n            var inDoubleQuotes = false;\\\\n            var inSingleQuotes = false;\\\\n            var preserve       = (typeof split === 'object' && split.preserve) ? true : false;\\\\n            \\\\n            // The character to split the CSV string on\\\\n            if (typeof split === 'object') {\\\\n                if (typeof split.char === 'string') {\\\\n                    split = split.char;\\\\n                } else {\\\\n                    split = ',';\\\\n                }\\\\n            } // If not an object just leave the char as it's supplied\\\\n\\\\n\\\\n\\\\n            for (var i=0,len=str.length; i<len; i+=1) {\\\\n                \\\\n                char = str.charAt(i);\\\\n                \\\\n                if ( (char === '\\\\\\\"') && !inDoubleQuotes) {\\\\n                    inDoubleQuotes = true;\\\\n                    continue;\\\\n                \\\\n                } else if ( (char === '\\\\\\\"') && inDoubleQuotes) {\\\\n                    inDoubleQuotes = false;\\\\n                    continue;\\\\n                }\\\\n                if ( (char === \\\\\\\"'\\\\\\\") && !inSingleQuotes) {\\\\n                    inSingleQuotes = true;\\\\n                    continue;\\\\n                \\\\n                } else if ( (char === \\\\\\\"'\\\\\\\") && inSingleQuotes) {\\\\n                    inSingleQuotes = false;\\\\n                    continue;\\\\n    \\\\n                } else if (char === split && !inDoubleQuotes && !inSingleQuotes) {\\\\n// TODO look ahead in order to allow for multi-character seperators\\\\n                    arr.push(field);\\\\n                    field = '';\\\\n                    continue;\\\\n    \\\\n                } else {\\\\n                    field = field + char;\\\\n                }\\\\n            }\\\\n            \\\\n            // Add the last field\\\\n            arr.push(field);\\\\n            \\\\n            // Now trim each value if necessary\\\\n            if (!preserve) {\\\\n                for (i=0,len=arr.length; i<len; i+=1) {\\\\n                    arr[i] = arr[i].trim();\\\\n                }\\\\n            }\\\\n    \\\\n            return arr;\\\\n        };\\\\n\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * This function splits the CSV data into an array so that it can be useful.\\\\n        */\\\\n        this.fetch = function ()\\\\n        {\\\\n            var sep = this.seperator,\\\\n                eol = this.endofline,\\\\n                obj = this;\\\\n\\\\n            if (this.url.substring(0,3) === 'id:' || this.url.substring(0,4) === 'str:') {\\\\n\\\\n                // Get rid of any surrounding whitespace\\\\n                if (this.url.substring(0,3) === 'id:') {\\\\n                    var data = document.getElementById(this.url.substring(3)).innerHTML.trim();\\\\n                \\\\n                } else if (this.url.substring(0,4) === 'str:') {\\\\n                    var data = this.url.substring(4).trim();\\\\n                }\\\\n\\\\n                // Store the CSV data on the CSV object (ie - this object)\\\\n                obj.data = data.split(eol);\\\\n\\\\n                // Store the number of rows\\\\n                obj.numrows = obj.data.length;\\\\n\\\\n                for (var i=0,len=obj.data.length; i<len; i+=1) {\\\\n\\\\n\\\\n                    /**\\\\n                    * Split the individual line\\\\n                    */\\\\n                    //var row = obj.data[i].split(sep);\\\\n                    var row = obj.splitCSV(obj.data[i], {preserve: false, char: sep});\\\\n\\\\n\\\\n                    if (!obj.numcols) {\\\\n                        obj.numcols = row.length;\\\\n                    }\\\\n\\\\n                    /**\\\\n                    * If the cell is purely made up of numbers - convert it\\\\n                    */\\\\n                    for (var j=0; j<row.length; j+=1) {\\\\n                        if ((/^\\\\\\\\-?[0-9.]+\\\\\\\$/).test(row[j])) {\\\\n                            row[j] = parseFloat(row[j]);\\\\n                        }\\\\n                            \\\\n                        // Assign the split-up-row back to the data array\\\\n                        obj.data[i] = row;\\\\n                    }\\\\n                }\\\\n                \\\\n                // Call the ready function straight away\\\\n                obj.ready(obj);\\\\n\\\\n            } else {\\\\n\\\\n                RGraph.AJAX.getString(this.url, function (data)\\\\n                {\\\\n                    data = data.replace(/(\\\\\\\\r?\\\\\\\\n)+\\\\\\\$/, '');\\\\n\\\\n                    /**\\\\n                    * Split the lines in the CSV\\\\n                    */\\\\n                    obj.data = data.split(eol);\\\\n\\\\n                    /**\\\\n                    * Store the number of rows\\\\n                    */\\\\n                    obj.numrows = obj.data.length;\\\\n\\\\n\\\\n\\\\n                    /**\\\\n                    * Loop thru each lines in the CSV file\\\\n                    */\\\\n                    for (var i=0,len=obj.data.length; i<len; i+=1) {\\\\n                        /**\\\\n                        * Use the new split function to split each row NOT preserving whitespace\\\\n                        */\\\\n                        //var row = obj.data[i].split(sep);\\\\n                        var row = obj.splitCSV(obj.data[i], {preserve: false, char: sep});\\\\n\\\\n                        if (!obj.numcols) {\\\\n                            obj.numcols = row.length;\\\\n                        }\\\\n\\\\n                        /**\\\\n                        * If the cell is purely made up of numbers - convert it\\\\n                        */\\\\n                        for (var j=0; j<row.length; j+=1) {\\\\n                            if ((/^\\\\\\\\-?[0-9.]+\\\\\\\$/).test(row[j])) {\\\\n                                row[j] = parseFloat(row[j]);\\\\n                            }\\\\n\\\\n                            // Assign the split-up-row back to the data array\\\\n                            obj.data[i] = row;\\\\n                        }\\\\n                    }\\\\n\\\\n                    // Call the ready function straight away\\\\n                    obj.ready(obj);\\\\n                });\\\\n            }\\\\n        };\\\\n\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * Returns a row of the CSV file\\\\n        * \\\\n        * @param number index The index of the row to fetch\\\\n        * @param        start OPTIONAL If desired you can specify a column to start at (which starts at 0 by default)\\\\n        */\\\\n        this.getRow = function (index)\\\\n        {\\\\n            var row   = [];\\\\n            var start = arguments[1] || 0;\\\\n\\\\n            for (var i=start; i<this.numcols; i+=1) {\\\\n                row.push(this.data[index][i]);\\\\n            }\\\\n            \\\\n            return row;\\\\n        };\\\\n\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * Returns a column of the CSV file\\\\n        * \\\\n        * @param number index The index of the column to fetch\\\\n        * @param        start OPTIONAL If desired you can specify a row to start at (which starts at 0 by default)\\\\n        */\\\\n        this.getCol =\\\\n        this.getColumn = function (index)\\\\n        {\\\\n            var col   = [];\\\\n            var start = arguments[1] || 0;\\\\n\\\\n            for (var i=start; i<this.numrows; i+=1) {\\\\n                col.push(this.data[i][index]);\\\\n            }\\\\n            \\\\n            return col;\\\\n        };\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n        // Fetch the CSV file\\\\n        this.fetch();\\\\n    };\\\";\");\";}}");

?>