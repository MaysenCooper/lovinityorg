<?php
return unserialize("a:5:{i:0;a:1:{i:0;a:1:{i:0;a:5:{i:0;s:33:\"tcpfunc_58dc766f788154.76133124_1\";i:1;a:0:{}i:2;i:1;i:3;s:0:\"\";i:4;s:0:\"\";}}}i:1;a:0:{}i:2;s:22:\"RGraph.common.tooltips\";i:3;N;i:4;a:1:{s:33:\"tcpfunc_58dc766f788154.76133124_1\";s:14358:\"\$tpl_funcs['tcpfunc_58dc766f788154.76133124_1']=\$KEEP_TPL_FUNCS['tcpfunc_58dc766f788154.76133124_1']=recall_named_function('58dc766f788259.52812861','\$parameters,\$cl',\"echo \\\"// version: 2016-12-05\\\\n    /**\\\\n    * o--------------------------------------------------------------------------------o\\\\n    * | This file is part of the RGraph package - you can learn more at:               |\\\\n    * |                                                                                |\\\\n    * |                          http://www.rgraph.net                                 |\\\\n    * |                                                                                |\\\\n    * | RGraph is licensed under the Open Source MIT license. That means that it's     |\\\\n    * | totally free to use!                                                           |\\\\n    * o--------------------------------------------------------------------------------o\\\\n    */\\\\n\\\\n    RGraph = window.RGraph || {isRGraph: true};\\\\n\\\\n\\\\n\\\\n\\\\n// Module pattern\\\\n(function (win, doc, undefined)\\\\n{\\\\n    var RG  = RGraph,\\\\n        ua  = navigator.userAgent,\\\\n        ma  = Math;\\\\n\\\\n\\\\n\\\\n\\\\n    /**\\\\n    * This is used in two functions, hence it's here\\\\n    */\\\\n    RG.tooltips     = {};\\\\n    RG.tooltips.style = {\\\\n        display:    'inline-block',\\\\n        position:   'absolute',\\\\n        padding:    '6px',\\\\n        fontFamily: 'Arial',\\\\n        fontSize:   '10pt',\\\\n        fontWeight: 'normal',\\\\n        textAlign:  'center',\\\\n        left:       0,\\\\n        top:        0,\\\\n        backgroundColor: 'rgb(255,255,239)',\\\\n        color:      'black',\\\\n        visibility: 'visible',\\\\n        zIndex:     3,\\\\n        borderRadius: '5px',\\\\n        boxShadow:  'rgba(96,96,96,0.5) 0 0 5px',\\\\n        opacity:    0\\\\n    };\\\\n\\\\n\\\\n\\\\n    /**\\\\n    * Shows a tooltip next to the mouse pointer\\\\n    * \\\\n    * @param canvas object The canvas element object\\\\n    * @param text   string The tooltip text\\\\n    * @param int     x      The X position that the tooltip should appear at. Combined with the canvases offsetLeft\\\\n    *                       gives the absolute X position\\\\n    * @param int     y      The Y position the tooltip should appear at. Combined with the canvases offsetTop\\\\n    *                       gives the absolute Y position\\\\n    * @param int     idx    The index of the tooltip in the graph objects tooltip array\\\\n    * @param object  e      The event object\\\\n    */\\\\n    RG.tooltip =\\\\n    RG.Tooltip = function (obj, text, x, y, idx, e)\\\\n    {\\\\n        if (RG.trim(text).length === 0) {\\\\n            return;\\\\n        }\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * Fire the beforetooltip event\\\\n        */\\\\n        RG.fireCustomEvent(obj, 'onbeforetooltip');\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * chart.tooltip.override allows you to totally take control of rendering the tooltip yourself\\\\n        */\\\\n        if (typeof(obj.get('chart.tooltips.override')) == 'function') {\\\\n            return obj.get('chart.tooltips.override')(obj, text, x, y, idx);\\\\n        }\\\\n\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * Save the X/Y coords\\\\n        */\\\\n        var originalX = x;\\\\n        var originalY = y;\\\\n\\\\n        /**\\\\n        * This facilitates the \\\\\\\"id:xxx\\\\\\\" format\\\\n        */\\\\n        text = RG.getTooltipTextFromDIV(text);\\\\n\\\\n        /**\\\\n        * First clear any exising timers\\\\n        */\\\\n        var timers = RG.Registry.Get('chart.tooltip.timers');\\\\n\\\\n        if (timers && timers.length) {\\\\n            for (i=0; i<timers.length; ++i) {\\\\n                clearTimeout(timers[i]);\\\\n            }\\\\n        }\\\\n        RG.Registry.Set('chart.tooltip.timers', []);\\\\n\\\\n        /**\\\\n        * Hide the context menu if it's currently shown\\\\n        */\\\\n        if (obj.get('chart.contextmenu')) {\\\\n            RG.hideContext();\\\\n        }\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * Show a tool tip\\\\n        */\\\\n        var tooltipObj       = document.createElement('DIV');\\\\n        tooltipObj.className = obj.get('chart.tooltips.css.class');\\\\n\\\\n        // Add the default CSS to the tooltip\\\\n        for (var i in RGraph.tooltips.style) {\\\\n            if (typeof i === 'string') {\\\\n                tooltipObj.style[i] = RGraph.tooltips.style[i];\\\\n            }\\\\n        }\\\\n\\\\n        tooltipObj.innerHTML                = text;\\\\n        tooltipObj.__text__                 = text; // This is set because the innerHTML can change when it's set\\\\n        tooltipObj.__canvas__               = obj.canvas;\\\\n        tooltipObj.id                       = '__rgraph_tooltip_' + obj.canvas.id + '_' + obj.uid + '_'+ idx;\\\\n        tooltipObj.__event__                = obj.Get('chart.tooltips.event') || 'click';\\\\n        tooltipObj.__object__               = obj;\\\\n\\\\n        if (typeof idx === 'number') {\\\\n            tooltipObj.__index__ = idx;\\\\n            origIdx = idx;\\\\n        }\\\\n\\\\n        if (obj.type === 'line' || obj.type === 'radar') {\\\\n            for (var ds=0; ds<obj.data.length; ++ds) {\\\\n                if (idx >= obj.data[ds].length) {\\\\n                    idx -= obj.data[ds].length;\\\\n                } else {\\\\n                    break;\\\\n                }\\\\n            }\\\\n            \\\\n            tooltipObj.__dataset__ = ds;\\\\n            tooltipObj.__index2__  = idx;\\\\n        }\\\\n\\\\n        document.body.appendChild(tooltipObj);\\\\n        //obj.canvas.parentNode.appendChild(tooltipObj);\\\\n\\\\n        var width  = tooltipObj.offsetWidth;\\\\n        var height = tooltipObj.offsetHeight;\\\\n\\\\n\\\\n        /**\\\\n        * Set the width on the tooltip so it doesn't resize if the window is resized\\\\n        */\\\\n        tooltipObj.style.width = width + 'px';\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n        //\\\\n        // position the tooltip on the mouse pointers position\\\\n        //\\\\n        var mouseXY  = RG.getMouseXY(e);\\\\n        var canvasXY = RG.getCanvasXY(obj.canvas);\\\\n\\\\n        // Position based on the mouse pointer coords on the page\\\\n        tooltipObj.style.left = e.pageX - (parseFloat(tooltipObj.style.paddingLeft) + (width / 2)) + 'px';\\\\n        tooltipObj.style.top  = e.pageY - height - 10 + 'px';\\\\n        \\\\n        // If the left is less than zero - set it to 5\\\\n        if (parseFloat(tooltipObj.style.left) <= 5) {\\\\n            tooltipObj.style.left = '5px';\\\\n        }\\\\n\\\\n        // If the tooltip goes over the right hand edge then\\\\n        // adjust the positioning\\\\n        if (parseFloat(tooltipObj.style.left) + parseFloat(tooltipObj.style.width) > window.innerWidth) {\\\\n            tooltipObj.style.left  = ''\\\\n            tooltipObj.style.right = '5px'\\\\n        }\\\\n        \\\\n        // If the canvas has fixed positioning then set the tooltip position to\\\\n        // fixed too\\\\n        if (RG.isFixed(obj.canvas)) {\\\\n            var scrollTop = window.scrollY || document.documentElement.scrollTop;\\\\n\\\\n            tooltipObj.style.position = 'fixed';\\\\n            tooltipObj.style.top = e.pageY - scrollTop - height - 10 + 'px';\\\\n        }\\\\n        \\\\n        \\\\n        \\\\n        \\\\n        \\\\n        \\\\n        // If the effect is fade:\\\\n        // Increase the opacity from its default 0 up to 1 - fading the tooltip in\\\\n        if (obj.get('chart.tooltips.effect') === 'fade') {\\\\n            for (var i=1; i<=10; ++i) {\\\\n                (function (index)\\\\n                {\\\\n                    setTimeout(function ()\\\\n                    {\\\\n                        tooltipObj.style.opacity = index / 10;\\\\n                    }, index * 25);\\\\n                })(i);\\\\n            }\\\\n        } else {\\\\n            tooltipObj.style.opacity = 1;\\\\n        }\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * If the tooltip it self is clicked, cancel it\\\\n        */\\\\n        tooltipObj.onmousedown = function (e){e.stopPropagation();}\\\\n        tooltipObj.onmouseup   = function (e){e.stopPropagation();}\\\\n        tooltipObj.onclick     = function (e){if (e.button == 0) {e.stopPropagation();}}\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n        /**\\\\n        * Keep a reference to the tooltip in the registry\\\\n        */\\\\n        RG.Registry.Set('chart.tooltip', tooltipObj);\\\\n\\\\n        /**\\\\n        * Fire the tooltip event\\\\n        */\\\\n        RG.fireCustomEvent(obj, 'ontooltip');\\\\n    };\\\\n\\\\n\\\\n\\\\n\\\\n    /**\\\\n    * \\\\n    */\\\\n    RG.getTooltipTextFromDIV = function (text)\\\\n    {\\\\n        // This regex is duplicated firher down on roughly line 888\\\\n        var result = /^id:(.*)/.exec(text);\\\\n\\\\n        if (result && result[1] && document.getElementById(result[1])) {\\\\n            text = document.getElementById(result[1]).innerHTML;\\\\n        } else if (result && result[1]) {\\\\n            text = '';\\\\n        }\\\\n        \\\\n        return text;\\\\n    };\\\\n\\\\n\\\\n\\\\n\\\\n    /**\\\\n    * \\\\n    */\\\\n    RG.getTooltipWidth = function (text, obj)\\\\n    {\\\\n        var div = document.createElement('DIV');\\\\n            div.className             = obj.Get('chart.tooltips.css.class');\\\\n            div.style.paddingLeft     = RG.tooltips.padding;\\\\n            div.style.paddingRight    = RG.tooltips.padding;\\\\n            div.style.fontFamily      = RG.tooltips.font_face;\\\\n            div.style.fontSize        = RG.tooltips.font_size;\\\\n            div.style.visibility      = 'hidden';\\\\n            div.style.position        = 'absolute';\\\\n            div.style.top            = '300px';\\\\n            div.style.left             = 0;\\\\n            div.style.display         = 'inline';\\\\n            div.innerHTML             = RG.getTooltipTextFromDIV(text);\\\\n        document.body.appendChild(div);\\\\n\\\\n        return div.offsetWidth;\\\\n    };\\\\n\\\\n\\\\n\\\\n\\\\n    /**\\\\n    * Hides the currently shown tooltip\\\\n    */\\\\n    RG.hideTooltip =\\\\n    RG.HideTooltip = function ()\\\\n    {\\\\n        var tooltip = RG.Registry.Get('chart.tooltip');\\\\n        var uid     = arguments[0] && arguments[0].uid ? arguments[0].uid : null;\\\\n\\\\n        if (tooltip && tooltip.parentNode && (!uid || uid == tooltip.__canvas__.uid)) {\\\\n            tooltip.parentNode.removeChild(tooltip);\\\\n            tooltip.style.display = 'none';                \\\\n            tooltip.style.visibility = 'hidden';\\\\n            RG.Registry.Set('chart.tooltip', null);\\\\n        }\\\\n    };\\\\n\\\\n\\\\n\\\\n\\\\n    /**\\\\n    * This (as the name suggests preloads any images it can find in the tooltip text\\\\n    * \\\\n    * @param object obj The chart object\\\\n    */\\\\n    RG.preLoadTooltipImages =\\\\n    RG.PreLoadTooltipImages = function (obj)\\\\n    {\\\\n        var tooltips = obj.Get('chart.tooltips');\\\\n        \\\\n        if (RG.hasTooltips(obj)) {\\\\n        \\\\n            if (obj.type == 'rscatter') {\\\\n                tooltips = [];\\\\n                for (var i=0; i<obj.data.length; ++i) {\\\\n                    tooltips.push(obj.data[3]);\\\\n                }\\\\n            }\\\\n            \\\\n            for (var i=0; i<tooltips.length; ++i) {\\\\n                // Add the text to an offscreen DIV tag\\\\n                var div = document.createElement('DIV');\\\\n                    div.style.position = 'absolute';\\\\n                    div.style.opacity = 0;\\\\n                    div.style.top = '-100px';\\\\n                    div.style.left = '-100px';\\\\n                    div.innerHTML  = tooltips[i];\\\\n                document.body.appendChild(div);\\\\n                \\\\n                // Now get the IMG tags and create them\\\\n                var img_tags = div.getElementsByTagName('IMG');\\\\n    \\\\n                // Create the image in an off-screen image tag\\\\n                for (var j=0; j<img_tags.length; ++j) {\\\\n                        if (img_tags && img_tags[i]) {\\\\n                        var img = document.createElement('IMG');\\\\n                            img.style.position = 'absolute';\\\\n                            img.style.opacity = 0;\\\\n                            img.style.top = '-100px';\\\\n                            img.style.left = '-100px';\\\\n                            img.src = img_tags[i].src\\\\n                        document.body.appendChild(img);\\\\n                        \\\\n                        setTimeout(function () {document.body.removeChild(img);}, 250);\\\\n                    }\\\\n                }\\\\n    \\\\n                // Now remove the div\\\\n                document.body.removeChild(div);\\\\n            }\\\\n        }\\\\n    };\\\\n\\\\n\\\\n\\\\n\\\\n    /**\\\\n    * This is the tooltips canvas onmousemove listener\\\\n    */\\\\n    RG.tooltips_mousemove =\\\\n    RG.Tooltips_mousemove = function (obj, e)\\\\n    {\\\\n        var shape = obj.getShape(e);\\\\n        var changeCursor_tooltips = false\\\\n\\\\n        if (   shape\\\\n            && typeof(shape['index']) == 'number'\\\\n            && obj.Get('chart.tooltips')[shape['index']]\\\\n           ) {\\\\n\\\\n            var text = RG.parseTooltipText(obj.Get('chart.tooltips'), shape['index']);\\\\n\\\\n            if (text) {\\\\n\\\\n                /**\\\\n                * Change the cursor\\\\n                */\\\\n                changeCursor_tooltips = true;\\\\n\\\\n                if (obj.Get('chart.tooltips.event') == 'onmousemove') {\\\\n\\\\n                    // Show the tooltip if it's not the same as the one already visible\\\\n                    if (\\\\n                           !RG.Registry.Get('chart.tooltip')\\\\n                        || RG.Registry.Get('chart.tooltip').__object__.uid != obj.uid\\\\n                        || RG.Registry.Get('chart.tooltip').__index__ != shape['index']\\\\n                       ) {\\\\n\\\\n                        RG.hideTooltip();\\\\n                        RG.Clear(obj.canvas);\\\\n                        RG.redraw();\\\\n                        RG.tooltip(obj, text, e.pageX, e.pageY, shape['index']);\\\\n                        obj.Highlight(shape);\\\\n                    }\\\\n                }\\\\n            }\\\\n        \\\\n        /**\\\\n        * More highlighting\\\\n        */\\\\n        } else if (shape && typeof(shape['index']) == 'number') {\\\\n\\\\n            var text = RG.parseTooltipText(obj.Get('chart.tooltips'), shape['index']);\\\\n\\\\n            if (text) {\\\\n                changeCursor_tooltips = true\\\\n            }\\\\n        }\\\\n\\\\n        return changeCursor_tooltips;\\\\n    };\\\\n\\\\n\\\\n\\\\n\\\\n// End module pattern\\\\n})(window, document);\\\";\");\";}}");

?>